{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","node_modules/txtgen/dist/txtgen.min.js","node_modules/pluralize/pluralize.js","node_modules/nouns/index.js","src/dogeify.js","src/index.js"],"names":["e","n","exports","module","define","amd","globalThis","self","txtgen","u","Date","getTimezoneOffset","t","Math","abs","String","padStart","join","Set","a","i","o","s","r","l","random","c","d","floor","h","length","g","match","p","f","noun","a_noun","nouns","endsWith","includes","charAt","slice","adjective","an_adjective","v","replace","toUpperCase","split","b","min","push","addAdjectives","concat","addNouns","addTemplates","article","getAdjectives","getNouns","getTemplates","paragraph","sentence","setAdjectives","setNouns","setRandom","setTemplates","Object","defineProperty","value","root","pluralize","require","pluralRules","singularRules","uncountables","irregularPlurals","irregularSingles","sanitizeRule","rule","RegExp","restoreCase","word","token","toLowerCase","substr","index","result","str","args","arguments","sanitizeWord","rules","hasOwnProperty","len","test","replaceWord","replaceMap","keepMap","checkWord","bool","count","inclusive","singular","plural","isPlural","isSingular","addPluralRule","replacement","addSingularRule","addUncountableRule","addIrregularRule","single","forEach","Dogeify","ADJECTIVES","EMOTIONS","forbiddenPhrases","allNouns","map","ignore","filter","isWordForbidden","idx","phrases","phrase","newPhrase","correctSpelling","getAdjective","opts","assign","fillNouns","sentences","getSentences","fixPhrases","getEmotion","DOGE_WIDTH","DOGE_HEIGHT","rand","max","debounce","ms","isCooldown","apply","setTimeout","placePhrases","document","body","getClientRects","width","height","amount","Promise","all","Array","from","init","then","sentencies","container","createDocumentFragment","flatMap","text","phraseNode","createElement","className","style","left","top","innerText","appendChild","append","positionDoge","dogeEl","querySelector","initBg","backgroundImage","clearPhrases","querySelectorAll","element","remove","window","addEventListener"],"mappings":"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ACA,SACA,WACA,YACA,MACA,SACA,YACA,YACA,YACA,WACA,WACA,MACA,UACA,UACA,WACA,WACA,eACA,SACA,SACA,YACA,WACA,YACA,cACA,QACA,UACA,QACA,SACA,aACA,YACA,WACA,OACA,QACA,OACA,QACA,QACA,MACA,QACA,OACA,OACA,YACA,OACA,WACA,SACA,SACA,YACA,WACA,OACA,WACA,OACA,SACA,WACA,SACA,SACA,WACA,SACA,WACA,UACA,QACA,QACA,SACA,UACA,iBACA,QACA,OACA,SACA,UACA,UACA,aACA,WACA,MACA,eAhGF,gBAAA,SAAA,SAAA,YAsGE,WAtGF,QAAA,WAyGEkC,QAAQ1C,EAAUuC,oBAEbvC;;ACrfT,MAAA,EAAA,CACA,WACA,SACA,QACA,UACA,UACA,cACA,SACA,QACA,aACA,cACA,SACA,WACA,gBACA,cACA,YACA,UACA,aACA,WACA,OACA,iBACA,WACA,YACA,UACA,MACA,SACA,WACA,QACA,UACA,cACA,KACA,UACA,YACA,WACA,UACA,aACA,iBACA,YACA,QACA,YACA,UACA,cACA,YACA,gBACA,cACA,SACA,SACA,SACA,YACA,YACA,aACA,aACA,eACA,MACA,SACA,SACA,QACA,aACA,QACA,YACA,MACA,MACA,SACA,SACA,UACA,WACA,UACA,UACA,WACA,UACA,UACA,QACA,MACA,YACA,UACA,SACA,QACA,UACA,QACA,YACA,QACA,YACA,QACA,UACA,SACA,SACA,YACA,YACA,QACA,WACA,cACA,WACA,OACA,YACA,WACA,aACA,WACA,YACA,YACA,SACA,YACA,UACA,YACA,SACA,WACA,UACA,WACA,UACA,UACA,iBACA,kBACA,QACA,aACA,QACA,SACA,WACA,UACA,SACA,QACA,QACA,SACA,SACA,SACA,SACA,MACA,WACA,cACA,WACA,UACA,eACA,SACA,UACA,UACA,WACA,WACA,YACA,MACA,WACA,UACA,YACA,UACA,SACA,aACA,WACA,WACA,QACA,YACA,YACA,cACA,cACA,WACA,QACA,OACA,UACA,OACA,cACA,aACA,SACA,YACA,eACA,aACA,OACA,WACA,aACA,MACA,YACA,WACA,WACA,UACA,QACA,WACA,OACA,UACA,QACA,MACA,YACA,UACA,YACA,QACA,MACA,SACA,UACA,QACA,MACA,YACA,SACA,UACA,aACA,SACA,aACA,YACA,YACA,cACA,aACA,WACA,YACA,YACA,aACA,YACA,YACA,UACA,UACA,YACA,aACA,OACA,SACA,aACA,SACA,UACA,YACA,YACA,cACA,QACA,WACA,WACA,aACA,WACA,aACA,OACA,SACA,gBACA,YACA,gBACA,YACA,YACA,SACA,UACA,QACA,YACA,UACA,OACA,SACA,WACA,OACA,OACA,WACA,WACA,aACA,WACA,QACA,MACA,QACA,SACA,aACA,MACA,QACA,UACA,UACA,OACA,OACA,OACA,QACA,SACA,WACA,YACA,YACA,UACA,UACA,OACA,SACA,UACA,WACA,SACA,SACA,OACA,UACA,WACA,YACA,SACA,QACA,OACA,WACA,SACA,YACA,SACA,MACA,WACA,SACA,cACA,QACA,WACA,SACA,OACA,YACA,WACA,WACA,OACA,WACA,WACA,QACA,QACA,SACA,aACA,OACA,WACA,UACA,MACA,OACA,SACA,YACA,WACA,WACA,UACA,SACA,UACA,UACA,SACA,aACA,MACA,QACA,QACA,OACA,OACA,OACA,OACA,SACA,YACA,OACA,QACA,QACA,OACA,YACA,SACA,SACA,MACA,UACA,MACA,QACA,OACA,OACA,OACA,SACA,SACA,WACA,YACA,UACA,WACA,YACA,SACA,QACA,SACA,SACA,UACA,OACA,eACA,UACA,QACA,OACA,QACA,OACA,cACA,UACA,SACA,QACA,QACA,aACA,cACA,MACA,WACA,SACA,eACA,UACA,MACA,QACA,WACA,MACA,UACA,QACA,OACA,SACA,OACA,YACA,MACA,UACA,UACA,QACA,OACA,WACA,WACA,YACA,eACA,QACA,WACA,MACA,OACA,SACA,QACA,aACA,aACA,YACA,UACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,UACA,UACA,WACA,QACA,UACA,QACA,YACA,QACA,WACA,UACA,SACA,OACA,UACA,WACA,OACA,YACA,OACA,QACA,OACA,gBACA,WACA,WACA,SACA,OACA,MACA,SACA,OACA,OACA,SACA,WACA,OACA,QACA,SACA,SACA,QACA,YACA,OACA,WACA,UACA,UACA,UACA,OACA,SACA,SACA,QACA,QACA,SACA,OACA,QACA,OACA,SACA,SACA,SACA,WACA,SACA,cACA,UACA,QACA,WACA,MACA,QACA,OACA,SACA,UACA,SACA,MACA,QACA,YACA,MACA,YACA,MACA,QACA,WACA,UACA,QACA,QACA,SACA,QACA,SACA,QACA,YACA,YACA,QACA,QACA,aACA,QACA,YACA,aACA,SACA,cACA,SACA,SACA,UACA,QACA,cACA,SACA,QACA,SACA,YACA,UACA,QACA,WACA,WACA,UACA,SACA,QACA,aACA,SACA,SACA,SACA,QACA,QACA,QACA,UACA,iBACA,OACA,QACA,QACA,YACA,WACA,SACA,SACA,SACA,MACA,QACA,SACA,SACA,SACA,MACA,QACA,QACA,WACA,OACA,OACA,YACA,SACA,eACA,SACA,MACA,QACA,WACA,WACA,YACA,UACA,YACA,OACA,WACA,QACA,MACA,OACA,WACA,OACA,SACA,SACA,UACA,SACA,SACA,MACA,QACA,UACA,SACA,UACA,QACA,UACA,QACA,UACA,QACA,SACA,QACA,QACA,OACA,SACA,OACA,gBACA,cACA,aACA,WACA,WACA,OACA,SACA,OACA,OACA,QACA,QACA,SACA,OACA,WACA,YACA,MACA,QACA,SACA,SACA,aACA,YACA,SACA,QACA,OACA,SACA,QACA,QACA,SACA,UACA,SACA,MACA,OACA,UACA,eACA,QACA,cACA,aACA,UACA,UACA,MACA,UACA,SACA,OACA,YACA,WACA,OACA,SACA,QACA,UACA,YACA,QACA,WACA,OACA,YACA,SACA,UACA,WACA,UACA,SACA,QACA,OACA,YACA,WACA,UACA,YACA,UACA,OACA,WACA,OACA,UACA,SACA,YACA,UACA,OACA,WACA,YACA,SACA,MACA,WACA,YACA,QACA,WACA,cACA,YACA,SACA,SACA,cACA,QACA,UACA,OACA,UACA,KACA,UACA,cACA,WACA,SACA,UACA,OACA,SACA,QACA,UACA,SACA,WACA,WACA,SACA,OACA,SACA,aACA,YACA,UACA,aACA,UACA,SACA,gBACA,WACA,QACA,QACA,YACA,QACA,YACA,WACA,cACA,SACA,SACA,UACA,QACA,YACA,WACA,eACA,SACA,aACA,SACA,UACA,QACA,OACA,SACA,UACA,YACA,QACA,SACA,UACA,YACA,UACA,QACA,QACA,WACA,WACA,UACA,YACA,aACA,QACA,YACA,QACA,UACA,OACA,WACA,YACA,SACA,WACA,SACA,QACA,QACA,QACA,UACA,UACA,QACA,aACA,QACA,YACA,WACA,QACA,QACA,aACA,OACA,QACA,OACA,WACA,YACA,WACA,QACA,YACA,SACA,SACA,OACA,YACA,QACA,UACA,SACA,mBACA,cACA,cACA,OACA,OACA,SACA,QACA,SACA,YACA,SACA,SACA,cACA,gBACA,SACA,cACA,OACA,eACA,QACA,OACA,QACA,YACA,WACA,QACA,QACA,UACA,YACA,SACA,QACA,WACA,UACA,UACA,QACA,WACA,OACA,SACA,QACA,QACA,SACA,QACA,UACA,QACA,OACA,UACA,QACA,YACA,QACA,YACA,QACA,WACA,QACA,SACA,QACA,UACA,WACA,QACA,aACA,SACA,QACA,SACA,OACA,OACA,SACA,QACA,OACA,QACA,OACA,MACA,SACA,UACA,YACA,WACA,QACA,MACA,OACA,QACA,WACA,cACA,SACA,SACA,OACA,OACA,cACA,OACA,OACA,WACA,SACA,aACA,UACA,YACA,YACA,QACA,eACA,SACA,QACA,OACA,SACA,YACA,OACA,SACA,cACA,UACA,UACA,cACA,QACA,QACA,UACA,UACA,WACA,aACA,aACA,YACA,SACA,cACA,gBACA,YACA,UACA,aACA,aACA,cACA,aACA,YACA,aACA,UACA,YACA,cACA,WACA,cACA,UACA,gBACA,aACA,WACA,cACA,cACA,UACA,UACA,UACA,aACA,WACA,YACA,cACA,SACA,YACA,OACA,gBACA,aACA,aACA,eACA,WACA,YACA,QACA,QACA,WACA,cACA,iBACA,UACA,aACA,UACA,cACA,gBACA,UACA,UACA,YACA,cACA,WACA,gBACA,eACA,SACA,YACA,UACA,eACA,YACA,UACA,UACA,UACA,YACA,WACA,WACA,WACA,eACA,UACA,aACA,eACA,UACA,cACA,OACA,SACA,UACA,WACA,OACA,UACA,SACA,cACA,OACA,YACA,aACA,OACA,WACA,OACA,YACA,OACA,SACA,cACA,SACA,SACA,gBACA,WACA,aACA,UACA,OACA,UACA,MACA,UACA,SACA,QACA,SACA,QACA,UACA,aACA,YACA,gBACA,QACA,UACA,gBACA,WACA,UACA,SACA,SACA,UACA,SACA,QACA,SACA,YACA,QACA,WACA,MACA,UACA,SACA,OACA,QACA,UACA,WACA,SACA,QACA,YACA,QACA,QACA,SACA,OACA,UACA,WACA,SACA,QACA,QACA,WACA,UACA,WACA,SACA,WACA,SACA,WACA,QACA,eACA,QACA,OACA,OACA,WACA,UACA,YACA,QACA,WACA,YACA,WACA,YACA,YACA,YACA,SACA,YACA,QACA,OACA,QACA,sBACA,eACA,SACA,QACA,OACA,QACA,QACA,QACA,QACA,MACA,kBACA,MACA,SACA,WACA,aACA,WACA,aACA,UACA,UACA,aACA,MACA,WACA,UACA,SACA,QACA,OACA,SACA,WACA,UACA,SACA,UACA,QACA,UACA,UACA,WACA,MACA,UACA,SACA,UACA,UACA,WACA,QACA,UACA,WACA,SACA,UACA,QACA,OACA,YACA,MACA,WACA,SACA,SACA,QACA,SACA,OACA,QACA,SACA,UACA,SACA,SACA,OACA,OACA,OACA,OACA,YACA,OACA,WACA,OACA,WACA,QACA,MACA,SACA,OACA,WACA,OACA,SACA,OACA,QACA,aACA,SACA,OACA,SACA,SACA,UACA,WACA,OACA,cACA,eACA,WACA,aACA,aACA,OACA,OACA,UACA,UACA,aACA,cACA,SACA,QACA,SACA,UACA,WACA,SACA,QACA,MACA,QACA,UACA,YACA,aACA,YACA,YACA,aACA,UACA,aACA,aACA,QACA,SACA,QACA,UACA,cACA,SACA,SACA,WACA,SACA,OACA,UACA,UACA,YACA,cACA,SACA,aACA,YACA,YACA,gBACA,cACA,WACA,SACA,QACA,MACA,OACA,SACA,UACA,YACA,UACA,SACA,SACA,aACA,UACA,aACA,OACA,aACA,eACA,aACA,MACA,YACA,SACA,UACA,UACA,eACA,OACA,OACA,YACA,SACA,QACA,SACA,SACA,WACA,UACA,WACA,YACA,WACA,SACA,OACA,eACA,cACA,WACA,aACA,QACA,gBACA,WACA,YACA,cACA,aACA,UACA,gBACA,gBACA,WACA,UACA,OACA,SACA,aACA,OACA,UACA,WACA,WACA,eACA,cACA,WACA,QACA,QACA,SACA,UACA,SACA,WACA,OACA,SACA,WACA,MACA,MACA,UACA,UACA,OACA,SACA,SACA,UACA,SACA,SACA,OACA,WACA,WACA,OACA,MACA,SACA,WACA,QACA,UACA,YACA,YACA,WACA,QACA,OACA,SACA,YACA,WACA,QACA,QACA,QACA,aACA,OACA,aACA,SACA,UACA,QACA,UACA,QACA,UACA,WACA,QACA,QACA,QACA,SACA,WACA,UACA,UACA,YACA,OACA,OACA,OACA,UACA,QACA,MACA,QACA,OACA,WACA,MACA,MACA,SACA,SACA,WACA,aACA,OACA,aACA,aACA,YACA,UACA,WACA,OACA,aACA,SACA,OACA,QACA,WACA,SACA,QACA,MACA,UACA,WACA,UACA,WACA,QACA,aACA,YACA,OACA,QACA,OACA,MACA,OACA,eACA,SACA,WACA,UACA,WACA,YACA,UACA,YACA,OACA,OACA,QACA,SACA,YACA,YACA,SACA,MACA,aACA,SACA,YACA,WACA,aACA,SACA,MACA,UACA,SACA,WACA,QACA,UACA,QACA,WACA,cACA,oBACA,UACA,WACA,WACA,SACA,MACA,UACA,MACA,aACA,YACA,YACA,YACA,WACA,QACA,UACA,WACA,SACA,WACA,WACA,aACA,cACA,MACA,eACA,eACA,MACA,cACA,QACA,SACA,SACA,WACA,cACA,SACA,YACA,UACA,gBACA,aACA,WACA,QACA,cACA,OACA,YACA,OACA,WACA,YACA,QACA,SACA,QACA,QACA,UACA,YACA,aACA,MACA,WACA,QACA,SACA,MACA,aACA,WACA,QACA,gBACA,SACA,WACA,WACA,UACA,WACA,SACA,YACA,eACA,SACA,YACA,UACA,eACA,QACA,WACA,WACA,YACA,YACA,OACA,cACA,WACA,UACA,WACA,aACA,cACA,SACA,WACA,WACA,UACA,aACA,QACA,YACA,OACA,YACA,eACA,aACA,SACA,cACA,aACA,aACA,YACA,SACA,WACA,UACA,UACA,MACA,UACA,UACA,WACA,aACA,UACA,YACA,SACA,UACA,WACA,YACA,OACA,WACA,QACA,aACA,YACA,OACA,SACA,UACA,UACA,aACA,OACA,UACA,UACA,QACA,QACA,OACA,cACA,OACA,WACA,SACA,MACA,OACA,WACA,QACA,aACA,OACA,SACA,SACA,MACA,SACA,gBACA,WACA,SACA,QACA,OACA,MACA,OACA,QACA,UACA,UACA,WACA,SACA,MACA,OACA,WACA,OACA,UACA,OACA,SACA,SACA,MACA,QACA,UACA,SACA,QACA,YACA,aACA,MACA,QACA,aACA,QACA,UACA,SACA,QACA,QACA,QACA,UACA,SACA,WACA,OACA,OACA,QACA,OACA,QACA,QACA,UACA,OACA,UACA,OACA,SACA,aACA,SACA,WACA,MACA,OACA,UACA,YACA,WACA,OACA,WACA,YACA,UACA,UACA,aACA,UACA,UACA,MACA,UACA,OACA,QACA,UACA,QACA,QACA,OACA,WACA,SACA,OACA,QACA,SACA,QACA,SACA,YACA,aACA,QACA,QACA,QACA,UACA,QACA,OACA,SACA,MACA,aACA,QACA,QACA,MACA,UACA,OACA,MACA,QACA,MACA,OACA,SACA,YACA,SACA,OACA,OACA,OACA,WACA,WACA,WACA,YACA,YACA,QACA,QACA,UACA,WACA,WACA,WACA,SACA,WACA,UACA,UACA,OACA,OACA,SACA,SACA,SACA,OACA,YACA,WACA,UACA,QACA,aACA,WACA,OACA,MACA,WACA,YACA,QACA,aACA,YACA,UACA,UACA,UACA,WACA,SACA,UACA,UACA,YACA,QACA,SACA,WACA,SACA,SACA,aACA,UACA,SACA,QACA,OACA,QACA,QACA,QACA,QACA,cACA,OACA,cACA,OACA,MACA,WACA,cACA,UACA,QACA,MACA,UACA,YACA,WACA,QACA,SACA,SACA,OACA,UACA,OACA,eACA,UACA,SACA,SACA,OACA,WACA,OACA,WACA,YACA,SACA,MACA,SACA,OACA,UACA,SACA,SACA,UACA,SACA,MACA,WACA,YACA,OACA,UACA,SACA,QACA,WACA,SACA,UACA,OACA,YACA,QACA,UACA,MACA,UACA,SACA,OACA,UACA,WACA,YACA,UACA,WACA,SACA,WACA,SACA,SACA,UACA,QACA,QACA,OACA,YACA,UACA,UACA,SACA,OACA,aACA,MACA,OACA,OACA,YACA,QACA,QACA,UACA,OACA,SACA,UACA,eACA,QACA,SACA,OACA,OACA,KACA,OACA,OACA,UACA,MACA,YACA,UACA,UACA,OACA,WACA,OACA,UACA,OACA,OACA,UACA,WACA,SACA,QACA,SACA,WACA,UACA,UACA,SACA,aACA,aACA,WACA,OACA,OACA,WACA,QACA,QACA,OACA,UACA,QACA,gBACA,cACA,WACA,cACA,WACA,SACA,QACA,aACA,QACA,UACA,QACA,cACA,YACA,YACA,OACA,SACA,QACA,oBACA,oBACA,QACA,QACA,aACA,UACA,OACA,QACA,QACA,OACA,OACA,UACA,SACA,QACA,UACA,SACA,SACA,YACA,QACA,QACA,QACA,YACA,WACA,QACA,QACA,SACA,SACA,YACA,MACA,WACA,MACA,SACA,MACA,MACA,UACA,aACA,cACA,OACA,QACA,WACA,UACA,WACA,OACA,OACA,UACA,OACA,eACA,cACA,UACA,OACA,UACA,SACA,YACA,SACA,UACA,UACA,OACA,WACA,eACA,WACA,SACA,YACA,aACA,UACA,OACA,YACA,SACA,UACA,YACA,YACA,YACA,UACA,WACA,WACA,OACA,YACA,UACA,OACA,YACA,cACA,UACA,MACA,SACA,UACA,OACA,SACA,QACA,YACA,OACA,MACA,OACA,YACA,WACA,WACA,SACA,UACA,QACA,YACA,SACA,aACA,cACA,YACA,OACA,SACA,SACA,QACA,QACA,WACA,OACA,SACA,WACA,QACA,aACA,SACA,OACA,UACA,QACA,SACA,OACA,OACA,OACA,MACA,OACA,QACA,UACA,UACA,SACA,OACA,OACA,YACA,YACA,UACA,OACA,MACA,aACA,eACA,OACA,UACA,MACA,OACA,UACA,SACA,QACA,SACA,MACA,MACA,OACA,OACA,UACA,OACA,WACA,aACA,UACA,UACA,QACA,WACA,UACA,OACA,OACA,OACA,OACA,OACA,OACA,SACA,SACA,QACA,OACA,UACA,UACA,WACA,cACA,OACA,SACA,UACA,MACA,UACA,QACA,OACA,YACA,QACA,YACA,YACA,UACA,QACA,aACA,WACA,MACA,SACA,SACA,QACA,WACA,QACA,SACA,SACA,OACA,UACA,YACA,QACA,OACA,UACA,MACA,QACA,WACA,gBACA,UACA,aACA,YACA,WACA,QACA,WACA,cACA,eACA,cACA,MACA,aACA,WACA,YACA,SACA,OACA,OACA,QACA,KACA,QACA,UACA,UACA,QACA,cACA,SACA,YACA,aACA,UACA,aACA,eACA,cACA,YACA,UACA,QACA,gBACA,OACA,WACA,SACA,WACA,eACA,cACA,QACA,aACA,YACA,aACA,WACA,aACA,UACA,eACA,YACA,YACA,cACA,WACA,YACA,UACA,UACA,aACA,UACA,SACA,YACA,MACA,UACA,QACA,MACA,cACA,YACA,WACA,QACA,UACA,cACA,SACA,SACA,YACA,aACA,YACA,WACA,cACA,aACA,kBACA,kBACA,aACA,YACA,aACA,eACA,YACA,cACA,cACA,WACA,iBACA,WACA,aACA,WACA,gBACA,WACA,cACA,aACA,YACA,cACA,YACA,aACA,eACA,YACA,WACA,YACA,aACA,SACA,UACA,cACA,OACA,OACA,WACA,QACA,SACA,QACA,KACA,OACA,SACA,SACA,SACA,OACA,YACA,MACA,QACA,MACA,UACA,MACA,WACA,QACA,OACA,OACA,QACA,YACA,MACA,QACA,UACA,QACA,MACA,SACA,WACA,OACA,UACA,OACA,QACA,OACA,MACA,UACA,MACA,QACA,WACA,OACA,aACA,QACA,QACA,OACA,SACA,WACA,SACA,OACA,SACA,SACA,OACA,UACA,OACA,OACA,WACA,WACA,SACA,QACA,QACA,QACA,OACA,QACA,QACA,UACA,SACA,aACA,MACA,WACA,cACA,WACA,OACA,WACA,MACA,SACA,UACA,WACA,OACA,WACA,YACA,OACA,SACA,OACA,WACA,OACA,WACA,QACA,OACA,UACA,OACA,SACA,QACA,UACA,SACA,OACA,WACA,WACA,QACA,aACA,SACA,WACA,OACA,YACA,UACA,QACA,WACA,MACA,UACA,SACA,OACA,OACA,cACA,SACA,OACA,UACA,OACA,OACA,OACA,MACA,QACA,OACA,WACA,WACA,YACA,WACA,UACA,MACA,cACA,SACA,SACA,QACA,SACA,OACA,aACA,UACA,UACA,QACA,QACA,QACA,QACA,WACA,UACA,OACA,MACA,OACA,UACA,SACA,MACA,QACA,OACA,SACA,aACA,UACA,OACA,SACA,SACA,WACA,QACA,UACA,QACA,SACA,UACA,OACA,MACA,QACA,UACA,SACA,MACA,UACA,QACA,WACA,QACA,SACA,SACA,UACA,SACA,MACA,SACA,UACA,QACA,QACA,WACA,UACA,MACA,OACA,OACA,OACA,QACA,WACA,YACA,QACA,OACA,QACA,OACA,OACA,QACA,QACA,cACA,OACA,UACA,OACA,MACA,WACA,SACA,SACA,OACA,OACA,SACA,aACA,aACA,SACA,QACA,YACA,SACA,SACA,QACA,OACA,OACA,SACA,OACA,WACA,UACA,QACA,WACA,OACA,SACA,SACA,aACA,SACA,OACA,MACA,SACA,QACA,YACA,aACA,OACA,OACA,OACA,MACA,SACA,SACA,OACA,OACA,MACA,UACA,OACA,UACA,SACA,YACA,QACA,eACA,YACA,OACA,QACA,OACA,UACA,QACA,MACA,aACA,OACA,UACA,OACA,QACA,YACA,WACA,UACA,YACA,UACA,aACA,YACA,UACA,WACA,QACA,OACA,SACA,OACA,UACA,UACA,OACA,cACA,QACA,eACA,OACA,SACA,OACA,OACA,SACA,QACA,UACA,MACA,aACA,UACA,WACA,WACA,WACA,UACA,SACA,WACA,UACA,SACA,QACA,UACA,aACA,UACA,SACA,SACA,SACA,eACA,OACA,OACA,MACA,QACA,SACA,UACA,SACA,OACA,SACA,WACA,UACA,OACA,SACA,YACA,WACA,WACA,QACA,YACA,UACA,UACA,OACA,OACA,UACA,SACA,cACA,UACA,MACA,QACA,OACA,WACA,OACA,cACA,SACA,UACA,WACA,UACA,QACA,aACA,QACA,OACA,UACA,UACA,UACA,cACA,OACA,WACA,QACA,WACA,SACA,OACA,UACA,WACA,SACA,SACA,aACA,SACA,MACA,UACA,UACA,OACA,UACA,OACA,UACA,QACA,eACA,SACA,cACA,QACA,UACA,SACA,cACA,QACA,YACA,YACA,OACA,eACA,YACA,aACA,SACA,YACA,OACA,UACA,WACA,UACA,QACA,UACA,OACA,OACA,YACA,aACA,aACA,cACA,OACA,SACA,OACA,OACA,OACA,UACA,UACA,SACA,aACA,WACA,QACA,eACA,OACA,SACA,SACA,cACA,mBACA,SACA,WACA,eACA,aACA,OACA,UACA,UACA,OACA,UACA,SACA,QACA,SACA,MACA,QACA,UACA,OACA,SACA,YACA,QACA,OACA,QACA,QACA,OACA,MACA,SACA,YACA,cACA,QACA,SACA,UACA,SACA,UACA,aACA,UACA,UACA,QACA,OACA,OACA,YACA,YACA,MACA,UACA,SACA,WACA,UACA,SACA,WACA,OACA,QACA,OACA,SACA,gBACA,SACA,QACA,YACA,WACA,aACA,QACA,WACA,QACA,SACA,SACA,YACA,QACA,SACA,OACA,QACA,QACA,QACA,MACA,MACA,SACA,OACA,aACA,SACA,cACA,SACA,QACA,YACA,eACA,WACA,UACA,OACA,aACA,IACA,OACA,OACA,SACA,eACA,SACA,QACA,SACA,WACA,SACA,UACA,iBACA,SACA,OACA,YACA,OACA,WACA,UACA,OACA,SACA,WACA,WACA,cACA,YACA,OACA,SACA,QACA,OACA,MACA,UACA,UACA,UACA,UACA,iBACA,mBACA,kBACA,OACA,YACA,YACA,YACA,QACA,SACA,QACA,SACA,QACA,QACA,YACA,YACA,cACA,aACA,WACA,SACA,OACA,QACA,cACA,gBACA,gBACA,WACA,SACA,SACA,QACA,QACA,OACA,OACA,WACA,UACA,SACA,SACA,YACA,SACA,QACA,QACA,SACA,WACA,UACA,cACA,QACA,UACA,UACA,MACA,YACA,QACA,MACA,MACA,QACA,UACA,YACA,UACA,MACA,SACA,YACA,aACA,OACA,cACA,cACA,WACA,aACA,QACA,SACA,UACA,SACA,SACA,QACA,UACA,WACA,SACA,UACA,QACA,SACA,UACA,WACA,WACA,MACA,OACA,QACA,QACA,QACA,SACA,WACA,MACA,QACA,OACA,UACA,QACA,YACA,kBACA,UACA,QACA,UACA,cACA,cACA,WACA,SACA,SACA,YACA,SACA,UACA,YACA,SACA,QACA,WACA,aACA,QACA,eACA,eACA,WACA,WACA,UACA,SACA,UACA,QACA,SACA,MACA,QACA,QACA,UACA,UACA,SACA,WACA,SACA,SACA,YACA,SACA,UACA,OACA,QACA,OACA,aACA,eACA,WACA,eACA,aACA,cACA,YACA,MACA,QACA,KACA,OACA,SACA,SACA,SACA,OACA,YACA,OACA,UACA,SACA,MACA,SACA,UACA,OACA,SACA,OACA,OACA,QACA,UACA,WACA,YACA,OACA,SACA,UACA,OACA,WACA,MACA,UACA,WACA,QACA,QACA,UACA,UACA,QACA,UACA,UACA,cACA,YACA,SACA,QACA,WACA,QACA,YACA,QACA,YACA,UACA,YACA,SACA,gBACA,YACA,SACA,YACA,OACA,SACA,cACA,OACA,QACA,UACA,SACA,UACA,OACA,cACA,WACA,aACA,UACA,YACA,QACA,OACA,UACA,WACA,YACA,UACA,UACA,OACA,QACA,QACA,SACA,cACA,SACA,QACA,OACA,WACA,UACA,SACA,QACA,YACA,WACA,YACA,UACA,SACA,UACA,QACA,WACA,WACA,MACA,WACA,MACA,QACA,UACA,MACA,QACA,QACA,UACA,UACA,OACA,SACA,OACA,QACA,QACA,OACA,OACA,eACA,WACA,UACA,OACA,MACA,UACA,SACA,UACA,WACA,aACA,UACA,WACA,QACA,SACA,SACA,aACA,aACA,QACA,cACA,UACA,SACA,aACA,aACA,aACA,aACA,SACA,OACA,SACA,WACA,cACA,cACA,OACA,MACA,QACA,YACA,MACA,MACA,aACA,gBACA,QACA,WACA,cACA,aACA,QACA,QACA,eACA,SACA,WACA,UACA,UACA,QACA,UACA,OACA,SACA,SACA,SACA,UACA,MACA,QACA,OACA,QACA,MACA,SACA,OACA,OACA,aACA,UACA,SACA,QACA,OACA,SACA,MACA,WACA,YACA,OACA,YACA,WACA,OACA,OACA,SACA,YACA,OACA,QACA,UACA,UACA,OACA,SACA,OACA,QACA,WACA,OACA,QACA,QACA,QACA,OACA,QACA,SACA,QACA,aACA,UACA,UACA,eACA,UACA,QACA,WACA,WACA,WACA,OACA,SACA,aACA,WACA,WACA,UACA,SACA,QACA,OACA,SACA,SACA,OACA,UACA,QACA,UACA,UACA,YACA,SACA,aACA,eACA,OACA,OACA,SACA,YACA,QACA,SACA,YACA,OACA,UACA,SACA,YACA,SACA,SACA,WACA,YACA,OACA,YACA,SACA,SACA,OACA,OACA,OACA,OACA,MACA,UACA,QACA,WACA,aACA,WACA,QACA,YACA,OACA,SACA,YACA,WACA,WACA,WACA,aACA,cACA,WACA,OACA,UACA,UACA,SACA,MACA,SACA,YACA,QACA,QACA,UACA,QACA,WACA,UACA,SACA,QACA,WACA,YACA,gBACA,UACA,aACA,UACA,gBACA,UACA,gBACA,cACA,WACA,UACA,eACA,YACA,QACA,YACA,WACA,iBACA,QACA,QACA,SACA,aACA,UACA,UACA,SACA,WACA,YACA,YACA,QACA,UACA,QACA,WACA,SACA,UACA,QACA,aACA,YACA,UACA,YACA,UACA,aACA,UACA,WACA,UACA,aACA,aACA,eACA,YACA,UACA,SACA,UACA,WACA,UACA,UACA,YACA,SACA,gBACA,QACA,eACA,UACA,WACA,WACA,QACA,cACA,aACA,UACA,WACA,OACA,SACA,gBACA,eACA,gBACA,eACA,aACA,YACA,SACA,YACA,YACA,UACA,SACA,SACA,OACA,SACA,OACA,OACA,UACA,cACA,QACA,cACA,aACA,OACA,QACA,QACA,WACA,UACA,SACA,UACA,QACA,OACA,SACA,MACA,MACA,SACA,UACA,WACA,QACA,UACA,WACA,QACA,UACA,SACA,QACA,WACA,YACA,QACA,QACA,QACA,SACA,OACA,SACA,YACA,QACA,QACA,SACA,UACA,OACA,QACA,SACA,SACA,SACA,OACA,QACA,WACA,QACA,aACA,SACA,SACA,OACA,MACA,OACA,OACA,UACA,UACA,OACA,UACA,WACA,YACA,YACA,QACA,OACA,MACA,UACA,QACA,QACA,SACA,gBACA,QACA,OACA,YACA,MACA,OACA,QACA,QACA,UACA,MACA,UACA,MACA,QACA,QACA,WACA,WACA,OACA,UACA,UACA,SACA,OACA,SACA,UACA,YACA,SACA,SACA,WACA,cACA,iBACA,SACA,WACA,YACA,UACA,aACA,UACA,YACA,MACA,WACA,cACA,YACA,OACA,YACA,YACA,aACA,eACA,SACA,SACA,SACA,WACA,SACA,UACA,aACA,WACA,gBACA,SACA,WACA,eACA,WACA,aACA,UACA,cACA,SACA,WACA,SACA,WACA,SACA,SACA,OACA,SACA,aACA,SACA,UACA,cACA,cACA,QACA,SACA,iBACA,eACA,WACA,aACA,UACA,cACA,SACA,WACA,UACA,WACA,SACA,aACA,UACA,SACA,WACA,UACA,UACA,UACA,WACA,iBACA,OACA,aACA,SACA,WACA,aACA,SACA,UACA,SACA,SACA,WACA,UACA,UACA,SACA,aACA,UACA,WACA,SACA,aACA,aACA,QACA,SACA,OACA,OACA,SACA,OACA,QACA,QACA,QACA,QACA,MACA,OACA,WACA,MACA,SACA,OACA,QACA,OACA,QACA,WACA,UACA,OACA,UACA,QACA,OACA,QACA,OACA,SACA,SACA,cACA,MACA,OACA,OACA,SACA,OACA,OACA,UACA,OACA,OACA,OACA,UACA,SACA,QACA,QACA,aACA,QACA,SACA,UACA,MACA,UACA,QACA,MACA,SACA,UACA,SACA,SACA,SACA,QACA,OACA,OACA,MACA,MACA,UACA,SACA,OACA,WACA,OACA,KACA,QACA,OACA,MACA,SACA,OACA,SACA,OACA,OACA,WACA,SACA,QACA,SACA,OACA,WACA,SACA,QACA,SACA,OACA,UACA,SACA,SACA,UACA,OACA,UACA,UACA,WACA,UACA,OACA,SACA,OACA,YACA,QACA,SACA,eACA,QACA,UACA,OACA,SACA,UACA,SACA,UACA,MACA,YACA,QACA,WACA,UACA,YACA,QACA,gBACA,QACA,UACA,QACA,WACA,SACA,gBACA,YACA,SACA,cACA,WACA,UACA,WACA,WACA,UACA,QACA,QACA,OACA,UACA,UACA,WACA,SACA,gBACA,QACA,cACA,WACA,QACA,QACA,SACA,YACA,YACA,MACA,UACA,UACA,OACA,WACA,SACA,WACA,UACA,SACA,OACA,SACA,SACA,cACA,YACA,UACA,YACA,SACA,SACA,WACA,OACA,SACA,UACA,SACA,YACA,OACA,OACA,aACA,YACA,UACA,SACA,QACA,YACA,WACA,QACA,cACA,SACA,UACA,QACA,SACA,UACA,UACA,MACA,UACA,UACA,QACA,MACA,QACA,QACA,SACA,YACA,QACA,YACA,SACA,UACA,QACA,UACA,SACA,QACA,QACA,QACA,SACA,QACA,MACA,YACA,SACA,SACA,OACA,QACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,OACA,QACA,UACA,OACA,QACA,aACA,QACA,QACA,OACA,WACA,YACA,WACA,YACA,QACA,aACA,SACA,QACA,YACA,OACA,UACA,WACA,QACA,WACA,SACA,YACA,OACA,WACA,SACA,OACA,SACA,eACA,QACA,SACA,SACA,UACA,OACA,OACA,YACA,YACA,UACA,aACA,WACA,SACA,OACA,SACA,YACA,SACA,eACA,SACA,UACA,SACA,OACA,WACA,OACA,QACA,OACA,SACA,SACA,OACA,SACA,SACA,OACA,MACA,SACA,gBACA,QACA,OACA,YACA,OACA,QACA,SACA,QACA,OACA,QACA,QACA,WACA,eACA,QACA,MACA,WACA,aACA,UACA,YACA,QACA,QACA,OACA,SACA,QACA,QACA,SACA,QACA,QACA,SACA,QACA,OACA,UACA,WACA,QACA,QACA,QACA,QACA,WACA,QACA,QACA,OACA,QACA,UACA,YACA,QACA,QACA,YACA,WACA,SACA,OACA,SACA,OACA,eACA,YACA,UACA,eACA,WACA,YACA,WACA,UACA,OACA,SACA,UACA,YACA,OACA,QACA,OACA,OACA,OACA,WACA,YACA,YACA,WACA,OACA,UACA,QACA,YACA,WACA,WACA,aACA,YACA,MACA,OACA,WACA,SACA,OACA,UACA,SACA,SACA,OACA,WACA,QACA,OACA,SACA,WACA,aACA,QACA,gBACA,cACA,MACA,MACA,UACA,QACA,UACA,QACA,YACA,UACA,QACA,QACA,QACA,UACA,QACA,UACA,eACA,QACA,UACA,aACA,WACA,YACA,aACA,eACA,SACA,QACA,YACA,QACA,WACA,QACA,SACA,SACA,SACA,QACA,UACA,QACA,SACA,SACA,YACA,QACA,SACA,QACA,SACA,QACA,QACA,OACA,YACA,QACA,SACA,SACA,WACA,SACA,SACA,QACA,OACA,MACA,SACA,SACA,WACA,WACA,QACA,WACA,SACA,QACA,WACA,UACA,QACA,OACA,QACA,QACA,QACA,YACA,WACA,SACA,UACA,QACA,SACA,QACA,WACA,WACA,OACA,QACA,UACA,QACA,YACA,UACA,gBACA,YACA,SACA,OACA,QACA,QACA,QACA,cACA,QACA,UACA,OACA,UACA,OACA,YACA,eACA,eACA,gBACA,cACA,mBACA,mBACA,aACA,cACA,iBACA,QACA,cACA,UACA,WACA,aACA,OACA,QACA,WACA,QACA,UACA,SACA,QACA,WACA,YACA,iBACA,QACA,UACA,QACA,YACA,QACA,OACA,WACA,YACA,UACA,QACA,SACA,QACA,QACA,aACA,gBACA,QACA,SACA,SACA,WACA,QACA,WACA,QACA,aACA,SACA,SACA,YACA,WACA,SACA,UACA,SACA,SACA,QACA,SACA,YACA,WACA,OACA,UACA,SACA,QACA,QACA,YACA,SACA,YACA,WACA,QACA,UACA,SACA,eACA,eACA,UACA,YACA,aACA,aACA,YACA,SACA,SACA,UACA,OACA,QACA,cACA,QACA,aACA,OACA,WACA,SACA,SACA,MACA,UACA,YACA,SACA,UACA,YACA,aACA,UACA,UACA,WACA,cACA,SACA,UACA,YACA,cACA,UACA,YACA,UACA,UACA,UACA,WACA,WACA,SACA,QACA,UACA,aACA,cACA,MACA,UACA,QACA,OACA,QACA,QACA,UACA,SACA,aACA,YACA,YACA,UACA,QACA,SACA,QACA,OACA,WACA,WACA,QACA,QACA,SACA,cACA,SACA,QACA,YACA,WACA,WACA,WACA,YACA,UACA,QACA,QACA,SACA,QACA,aACA,QACA,aACA,WACA,aACA,SACA,UACA,OACA,SACA,WACA,OACA,OACA,MACA,UACA,aACA,iBACA,SACA,YACA,OACA,SACA,UACA,WACA,MACA,OACA,SACA,OACA,SACA,QACA,SACA,UACA,SACA,SACA,MACA,OACA,UACA,MACA,QACA,UACA,WACA,OACA,OACA,eACA,aACA,OACA,QACA,YACA,aACA,WACA,aACA,OACA,SACA,OACA,SACA,cACA,SACA,QACA,gBACA,YACA,YACA,WACA,WACA,SACA,QACA,UACA,OACA,QACA,OACA,aACA,WACA,YACA,OACA,OACA,WACA,UACA,SACA,OACA,UACA,SACA,QACA,SACA,YACA,WACA,cACA,QACA,QACA,WACA,SACA,UACA,SACA,QACA,SACA,QACA,UACA,SACA,SACA,SACA,SACA,SACA,QACA,UACA,cACA,cACA,eACA,QACA,MACA,SACA,MACA,QACA,QACA,SACA,OACA,OACA,UACA,SACA,OACA,WACA,UACA,QACA,UACA,MACA,YACA,SACA,UACA,MACA,OACA,SACA,WACA,QACA,OACA,QACA,QACA,MACA,UACA,OACA,OACA,SACA,YACA,MACA,SACA,aACA,WACA,UACA,MACA,OACA,SACA,UACA,OACA,OACA,QACA,aACA,aACA,YACA,MACA,UACA,QACA,UACA,QACA,YACA,WACA,UACA,QACA,aACA,WACA,SACA,QACA,OACA,QACA,QACA,YACA,OACA,UACA,QACA,QACA,OACA,YACA,YACA,MACA,WACA,QACA,YACA,UACA,QACA,YACA,iBACA,UACA,QACA,UACA,QACA,UACA,WACA,OACA,QACA,cACA,aACA,cACA,eACA,UACA,YACA,iBACA,WACA,YACA,YACA,QACA,SACA,OACA,QACA,YACA,OACA,UACA,SACA,SACA,QACA,WACA,QACA,QACA,eACA,OACA,UACA,OACA,SACA,UACA,WACA,UACA,UACA,WACA,QACA,QACA,SACA,QACA,UACA,UACA,QACA,QACA,QACA,MACA,UACA,UACA,MACA,OACA,OACA,UACA,QACA,QACA,OACA,OACA,UACA,QACA,SACA,SACA,UACA,OACA,SACA,WACA,YACA,SACA,SACA,SACA,OACA,SACA,KACA,OACA,WACA,QACA,QACA,UACA,MACA,OACA,aACA,UACA,QACA,UACA,WACA,aACA,QACA,eACA,cACA,aACA,aACA,YACA,aACA,gBACA,YACA,YACA,eACA,UACA,UACA,QACA,SACA,OACA,QACA,aACA,QACA,WACA,MACA,QACA,MACA,OACA,QACA,QACA,UACA,WACA,SACA,UACA,UACA,WACA,SACA,WACA,QACA,MACA,OACA,SACA,YACA,UACA,OACA,OACA,QACA,WACA,OACA,YACA,gBACA,aACA,UACA,OACA,OACA,QACA,SACA,YACA,SACA,YACA,QACA,UACA,UACA,aACA,QACA,UACA,UACA,QACA,SACA,OACA,WACA,OACA,aACA,YACA,QACA,OACA,QACA,UACA,WACA,QACA,QACA,WACA,SACA,SACA,WACA,SACA,QACA,UACA,OACA,SACA,QACA,UACA,QACA,SACA,WACA,QACA,QACA,UACA,aACA,SACA,SACA,UACA,MACA,QACA,SACA,QACA,YACA,OACA,SACA,WACA,OACA,OACA,SACA,UACA,OACA,UACA,SACA,SACA,SACA,SACA,UACA,MACA,SACA,UACA,SACA,UACA,UACA,OACA,YACA,YACA,SACA,UACA,OACA,QACA,cACA,QACA,aACA,QACA,WACA,YACA,cACA,aACA,OACA,MACA,MACA,WACA,SACA,SACA,OACA,SACA,UACA,MACA,UACA,QACA,OACA,SACA,aACA,OACA,UACA,YACA,SACA,QACA,UACA,UACA,OACA,OACA,UACA,UACA,UACA,QACA,QACA,QACA,QACA,UACA,QACA,OACA,YACA,YACA,UACA,UACA,UACA,QACA,QACA,YACA,aACA,Q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","file":"src.4a57d226.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","// txtgen@2.2.8, by @ndaidong - built on Sun, 08 Nov 2020 08:54:01 GMT - published under MIT license\n!function(e,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?n(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],n):n((e=\"undefined\"!=typeof globalThis?globalThis:e||self).txtgen={})}(this,(function(e){const n=(new Date).getTimezoneOffset(),t=((()=>{const e=Math.abs(n/60);[\"GMT\",n<0?\"+\":\"-\",String(e).padStart(4,\"0\")].join(\"\")})(),(e=[])=>[...new Set(e)]);var a=[\"alligator\",\"ant\",\"bear\",\"bee\",\"bird\",\"camel\",\"cat\",\"cheetah\",\"chicken\",\"chimpanzee\",\"cow\",\"crocodile\",\"deer\",\"dog\",\"dolphin\",\"duck\",\"eagle\",\"elephant\",\"fish\",\"fly\",\"fox\",\"frog\",\"giraffe\",\"goat\",\"goldfish\",\"hamster\",\"hippopotamus\",\"horse\",\"kangaroo\",\"kitten\",\"lion\",\"lobster\",\"monkey\",\"octopus\",\"owl\",\"panda\",\"pig\",\"puppy\",\"rabbit\",\"rat\",\"scorpion\",\"seal\",\"shark\",\"sheep\",\"snail\",\"snake\",\"spider\",\"squirrel\",\"tiger\",\"turtle\",\"wolf\",\"zebra\",\"apple\",\"apricot\",\"banana\",\"blackberry\",\"blueberry\",\"cherry\",\"cranberry\",\"currant\",\"fig\",\"grape\",\"grapefruit\",\"grapes\",\"kiwi\",\"kumquat\",\"lemon\",\"lime\",\"melon\",\"nectarine\",\"orange\",\"peach\",\"pear\",\"persimmon\",\"pineapple\",\"plum\",\"pomegranate\",\"prune\",\"raspberry\",\"strawberry\",\"tangerine\",\"watermelon\"],i=[\"adaptable\",\"adventurous\",\"affable\",\"affectionate\",\"agreeable\",\"alert\",\"alluring\",\"ambitious\",\"ambitious\",\"amiable\",\"amicable\",\"amused\",\"amusing\",\"boundless\",\"brave\",\"brave\",\"bright\",\"bright\",\"broad-minded\",\"calm\",\"calm\",\"capable\",\"careful\",\"charming\",\"charming\",\"cheerful\",\"coherent\",\"comfortable\",\"communicative\",\"compassionate\",\"confident\",\"conscientious\",\"considerate\",\"convivial\",\"cooperative\",\"courageous\",\"courageous\",\"courteous\",\"creative\",\"credible\",\"cultured\",\"dashing\",\"dazzling\",\"debonair\",\"decisive\",\"decisive\",\"decorous\",\"delightful\",\"detailed\",\"determined\",\"determined\",\"diligent\",\"diligent\",\"diplomatic\",\"discreet\",\"discreet\",\"dynamic\",\"dynamic\",\"eager\",\"easygoing\",\"efficient\",\"elated\",\"eminent\",\"emotional\",\"enchanting\",\"encouraging\",\"endurable\",\"energetic\",\"energetic\",\"entertaining\",\"enthusiastic\",\"enthusiastic\",\"excellent\",\"excited\",\"exclusive\",\"exuberant\",\"exuberant\",\"fabulous\",\"fair\",\"fair-minded\",\"faithful\",\"faithful\",\"fantastic\",\"fearless\",\"fearless\",\"fine\",\"forceful\",\"frank\",\"frank\",\"friendly\",\"friendly\",\"funny\",\"funny\",\"generous\",\"generous\",\"gentle\",\"gentle\",\"glorious\",\"good\",\"good\",\"gregarious\",\"happy\",\"hard-working\",\"harmonious\",\"helpful\",\"helpful\",\"hilarious\",\"honest\",\"honorable\",\"humorous\",\"imaginative\",\"impartial\",\"impartial\",\"independent\",\"industrious\",\"instinctive\",\"intellectual\",\"intelligent\",\"intuitive\",\"inventive\",\"jolly\",\"joyous\",\"kind\",\"kind\",\"kind-hearted\",\"knowledgeable\",\"level\",\"likeable\",\"lively\",\"lovely\",\"loving\",\"loving\",\"loyal\",\"lucky\",\"mature\",\"modern\",\"modest\",\"neat\",\"nice\",\"nice\",\"obedient\",\"optimistic\",\"painstaking\",\"passionate\",\"patient\",\"peaceful\",\"perfect\",\"persistent\",\"philosophical\",\"pioneering\",\"placid\",\"placid\",\"plausible\",\"pleasant\",\"plucky\",\"plucky\",\"polite\",\"powerful\",\"practical\",\"pro-active\",\"productive\",\"protective\",\"proud\",\"punctual\",\"quick-witted\",\"quiet\",\"quiet\",\"rational\",\"receptive\",\"reflective\",\"reliable\",\"relieved\",\"reserved\",\"resolute\",\"resourceful\",\"responsible\",\"rhetorical\",\"righteous\",\"romantic\",\"romantic\",\"sedate\",\"seemly\",\"selective\",\"self-assured\",\"self-confident\",\"self-disciplined\",\"sensible\",\"sensitive\",\"sensitive\",\"shrewd\",\"shy\",\"silly\",\"sincere\",\"sincere\",\"skillful\",\"smiling\",\"sociable\",\"splendid\",\"steadfast\",\"stimulating\",\"straightforward\",\"successful\",\"succinct\",\"sympathetic\",\"talented\",\"thoughtful\",\"thoughtful\",\"thrifty\",\"tidy\",\"tough\",\"tough\",\"trustworthy\",\"unassuming\",\"unbiased\",\"understanding\",\"unusual\",\"upbeat\",\"versatile\",\"vigorous\",\"vivacious\",\"warm\",\"warmhearted\",\"willing\",\"willing\",\"wise\",\"witty\",\"witty\",\"wonderful\"],o=[\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"],s=[\"the {{noun}} is {{a_noun}}\",\"{{a_noun}} is {{an_adjective}} {{noun}}\",\"the first {{adjective}} {{noun}} is, in its own way, {{a_noun}}\",\"their {{noun}} was, in this moment, {{an_adjective}} {{noun}}\",\"{{a_noun}} is {{a_noun}} from the right perspective\",\"the literature would have us believe that {{an_adjective}} {{noun}} is not but {{a_noun}}\",\"{{an_adjective}} {{noun}} is {{a_noun}} of the mind\",\"the {{adjective}} {{noun}} reveals itself as {{an_adjective}} {{noun}} to those who look\",\"authors often misinterpret the {{noun}} as {{an_adjective}} {{noun}}, when in actuality it feels more like {{an_adjective}} {{noun}}\",\"we can assume that any instance of {{a_noun}} can be construed as {{an_adjective}} {{noun}}\",\"they were lost without the {{adjective}} {{noun}} that composed their {{noun}}\",\"the {{adjective}} {{noun}} comes from {{an_adjective}} {{noun}}\",\"{{a_noun}} can hardly be considered {{an_adjective}} {{noun}} without also being {{a_noun}}\",\"few can name {{an_adjective}} {{noun}} that isn't {{an_adjective}} {{noun}}\",\"some posit the {{adjective}} {{noun}} to be less than {{adjective}}\",\"{{a_noun}} of the {{noun}} is assumed to be {{an_adjective}} {{noun}}\",\"{{a_noun}} sees {{a_noun}} as {{an_adjective}} {{noun}}\",\"the {{noun}} of {{a_noun}} becomes {{an_adjective}} {{noun}}\",\"{{a_noun}} is {{a_noun}}'s {{noun}}\",\"{{a_noun}} is the {{noun}} of {{a_noun}}\",\"{{an_adjective}} {{noun}}'s {{noun}} comes with it the thought that the {{adjective}} {{noun}} is {{a_noun}}\",\"{{nouns}} are {{adjective}} {{nouns}}\",\"{{adjective}} {{nouns}} show us how {{nouns}} can be {{nouns}}\",\"before {{nouns}}, {{nouns}} were only {{nouns}}\",\"those {{nouns}} are nothing more than {{nouns}}\",\"some {{adjective}} {{nouns}} are thought of simply as {{nouns}}\",\"one cannot separate {{nouns}} from {{adjective}} {{nouns}}\",\"the {{nouns}} could be said to resemble {{adjective}} {{nouns}}\",\"{{an_adjective}} {{noun}} without {{nouns}} is truly a {{noun}} of {{adjective}} {{nouns}}\"],r=[\"to be more specific, \",\"in recent years, \",\"however, \",\"by the way\",\"of course, \",\"some assert that \",\"if this was somewhat unclear, \",\"unfortunately, that is wrong; on the contrary, \",\"it's very tricky, if not impossible, \",\"this could be, or perhaps \",\"this is not to discredit the idea that \",\"we know that \",\"it's an undeniable fact, really; \",\"framed in a different way, \",\"what we don't know for sure is whether or not \",\"as far as we can estimate, \",\"as far as he is concerned, \",\"the zeitgeist contends that \",\"though we assume the latter, \",\"far from the truth, \",\"extending this logic, \",\"nowhere is it disputed that \",\"in modern times \",\"in ancient times \",\"recent controversy aside, \",\"washing and polishing the car,\",\"having been a gymnast, \",\"after a long day at school and work, \",\"waking to the buzz of the alarm clock, \",\"draped neatly on a hanger, \",\"shouting with happiness, \"];let u;const l=e=>{u=e};l(Math.random);const c=()=>u(),d=(e,n)=>{const t=e,a=n-e+1;return Math.floor(c()*a)+t},h=e=>{let n;for(;!n;)n=e[d(0,e.length-1)];return n},g=e=>{let n=\"a\";return e.match(/^(a|e|i|o)/)&&(n=\"an\"),`${n} ${e}`},p=[\"noun\",\"a_noun\",\"nouns\",\"adjective\",\"an_adjective\"],f={noun:()=>h(a),a_noun:()=>g(h(a)),nouns:()=>{return(e=h(a)).endsWith(\"s\")?e:(e.match(/(ss|ish|ch|x|us)$/)?e+=\"e\":e.endsWith(\"y\")&&!o.includes(e.charAt(e.length-2))&&(e=e.slice(0,e.length-1),e+=\"ie\"),e+\"s\");var e},adjective:()=>h(i),an_adjective:()=>g(h(i))},m=()=>(e=>{let n=e;const t=e.match(/\\{\\{(.+?)\\}\\}/g);if(t&&t.length)for(let e=0;e<t.length;e++){const a=t[e].replace(\"{{\",\"\").replace(\"}}\",\"\").replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\").replace(/\\r?\\n|\\r/g,\" \").replace(/\\s\\s+|\\r/g,\" \");let i;p.includes(a)&&(i=f[a]()),n=n.replace(t[e],i)}return n})(h(s)),v=()=>{let e=(c()<.33?h(r):\"\")+m();return e=e.charAt(0).toUpperCase()+e.slice(1),e+=(()=>{const e=\".......!?!?;...\".split(\"\");return h(e)})(),e},b=(e=0)=>{e||(e=d(3,10));const n=Math.min(e,15),t=[];for(;t.length<n;){const e=v();t.push(e)}return t.join(\" \")};e.addAdjectives=(e=[])=>{const n=i.concat(e);return(i=t(n)).length},e.addNouns=(e=[])=>{const n=a.concat(e);return(a=t(n)).length},e.addTemplates=(e=[])=>{const n=s.concat(e);return(s=t(n)).length},e.article=(e=0)=>{e||(e=d(3,10));const n=Math.min(e,15),t=[];for(;t.length<n;){const e=b();t.push(e)}return t.join(\"\\n\\n\")},e.getAdjectives=()=>[...i],e.getNouns=()=>[...a],e.getTemplates=()=>[...s],e.paragraph=b,e.sentence=v,e.setAdjectives=(e=[])=>(i=t(e)).length,e.setNouns=(e=[])=>(a=t(e)).length,e.setRandom=l,e.setTemplates=(e=[])=>(s=t(e)).length,Object.defineProperty(e,\"__esModule\",{value:!0})}));","/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eé]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n","const nouns = [\n  \"aardvark\",\n  \"abacus\",\n  \"abbey\",\n  \"abdomen\",\n  \"ability\",\n  \"abolishment\",\n  \"abroad\",\n  \"abuse\",\n  \"accelerant\",\n  \"accelerator\",\n  \"access\",\n  \"accident\",\n  \"accommodation\",\n  \"accompanist\",\n  \"accordion\",\n  \"account\",\n  \"accountant\",\n  \"achiever\",\n  \"acid\",\n  \"acknowledgment\",\n  \"acoustic\",\n  \"acoustics\",\n  \"acrylic\",\n  \"act\",\n  \"action\",\n  \"activity\",\n  \"actor\",\n  \"actress\",\n  \"acupuncture\",\n  \"ad\",\n  \"adapter\",\n  \"addiction\",\n  \"addition\",\n  \"address\",\n  \"adjustment\",\n  \"administration\",\n  \"adrenalin\",\n  \"adult\",\n  \"adulthood\",\n  \"advance\",\n  \"advancement\",\n  \"advantage\",\n  \"advertisement\",\n  \"advertising\",\n  \"advice\",\n  \"affair\",\n  \"affect\",\n  \"aftermath\",\n  \"afternoon\",\n  \"aftershave\",\n  \"aftershock\",\n  \"afterthought\",\n  \"age\",\n  \"agency\",\n  \"agenda\",\n  \"agent\",\n  \"aggression\",\n  \"aglet\",\n  \"agreement\",\n  \"aid\",\n  \"air\",\n  \"airbag\",\n  \"airbus\",\n  \"airfare\",\n  \"airforce\",\n  \"airline\",\n  \"airmail\",\n  \"airplane\",\n  \"airport\",\n  \"airship\",\n  \"alarm\",\n  \"alb\",\n  \"albatross\",\n  \"alcohol\",\n  \"alcove\",\n  \"alder\",\n  \"algebra\",\n  \"alibi\",\n  \"allergist\",\n  \"alley\",\n  \"alligator\",\n  \"alloy\",\n  \"almanac\",\n  \"almond\",\n  \"alpaca\",\n  \"alpenglow\",\n  \"alpenhorn\",\n  \"alpha\",\n  \"alphabet\",\n  \"alternative\",\n  \"altitude\",\n  \"alto\",\n  \"aluminium\",\n  \"aluminum\",\n  \"ambassador\",\n  \"ambition\",\n  \"ambulance\",\n  \"amendment\",\n  \"amount\",\n  \"amusement\",\n  \"anagram\",\n  \"analgesia\",\n  \"analog\",\n  \"analogue\",\n  \"analogy\",\n  \"analysis\",\n  \"analyst\",\n  \"anatomy\",\n  \"anesthesiology\",\n  \"anethesiologist\",\n  \"anger\",\n  \"angiosperm\",\n  \"angle\",\n  \"angora\",\n  \"angstrom\",\n  \"anguish\",\n  \"animal\",\n  \"anime\",\n  \"ankle\",\n  \"anklet\",\n  \"annual\",\n  \"anorak\",\n  \"answer\",\n  \"ant\",\n  \"anteater\",\n  \"antechamber\",\n  \"antelope\",\n  \"anthony\",\n  \"anthropology\",\n  \"antler\",\n  \"anxiety\",\n  \"anybody\",\n  \"anything\",\n  \"anywhere\",\n  \"apartment\",\n  \"ape\",\n  \"aperitif\",\n  \"apology\",\n  \"apparatus\",\n  \"apparel\",\n  \"appeal\",\n  \"appearance\",\n  \"appendix\",\n  \"applause\",\n  \"apple\",\n  \"applewood\",\n  \"appliance\",\n  \"application\",\n  \"appointment\",\n  \"approval\",\n  \"apron\",\n  \"apse\",\n  \"aquifer\",\n  \"arch\",\n  \"archaeology\",\n  \"archeology\",\n  \"archer\",\n  \"architect\",\n  \"architecture\",\n  \"arch-rival\",\n  \"area\",\n  \"argument\",\n  \"arithmetic\",\n  \"arm\",\n  \"armadillo\",\n  \"armament\",\n  \"armchair\",\n  \"armoire\",\n  \"armor\",\n  \"arm-rest\",\n  \"army\",\n  \"arrival\",\n  \"arrow\",\n  \"art\",\n  \"artichoke\",\n  \"article\",\n  \"artificer\",\n  \"ascot\",\n  \"ash\",\n  \"ashram\",\n  \"ashtray\",\n  \"aside\",\n  \"ask\",\n  \"asparagus\",\n  \"aspect\",\n  \"asphalt\",\n  \"assignment\",\n  \"assist\",\n  \"assistance\",\n  \"assistant\",\n  \"associate\",\n  \"association\",\n  \"assumption\",\n  \"asterisk\",\n  \"astrakhan\",\n  \"astrolabe\",\n  \"astrologer\",\n  \"astrology\",\n  \"astronomy\",\n  \"atelier\",\n  \"athlete\",\n  \"athletics\",\n  \"atmosphere\",\n  \"atom\",\n  \"atrium\",\n  \"attachment\",\n  \"attack\",\n  \"attempt\",\n  \"attendant\",\n  \"attention\",\n  \"attenuation\",\n  \"attic\",\n  \"attitude\",\n  \"attorney\",\n  \"attraction\",\n  \"audience\",\n  \"auditorium\",\n  \"aunt\",\n  \"author\",\n  \"authorisation\",\n  \"authority\",\n  \"authorization\",\n  \"automaton\",\n  \"avalanche\",\n  \"avenue\",\n  \"average\",\n  \"award\",\n  \"awareness\",\n  \"azimuth\",\n  \"babe\",\n  \"baboon\",\n  \"babushka\",\n  \"baby\",\n  \"back\",\n  \"backbone\",\n  \"backdrop\",\n  \"background\",\n  \"backpack\",\n  \"bacon\",\n  \"bad\",\n  \"badge\",\n  \"badger\",\n  \"bafflement\",\n  \"bag\",\n  \"bagel\",\n  \"baggage\",\n  \"bagpipe\",\n  \"bail\",\n  \"bait\",\n  \"bake\",\n  \"baker\",\n  \"bakery\",\n  \"bakeware\",\n  \"balaclava\",\n  \"balalaika\",\n  \"balance\",\n  \"balcony\",\n  \"ball\",\n  \"ballet\",\n  \"balloon\",\n  \"ballpark\",\n  \"bamboo\",\n  \"banana\",\n  \"band\",\n  \"bandana\",\n  \"bandanna\",\n  \"bandolier\",\n  \"bangle\",\n  \"banjo\",\n  \"bank\",\n  \"bankbook\",\n  \"banker\",\n  \"banquette\",\n  \"baobab\",\n  \"bar\",\n  \"barbeque\",\n  \"barber\",\n  \"barbiturate\",\n  \"barge\",\n  \"baritone\",\n  \"barium\",\n  \"barn\",\n  \"barometer\",\n  \"barracks\",\n  \"barstool\",\n  \"base\",\n  \"baseball\",\n  \"basement\",\n  \"basin\",\n  \"basis\",\n  \"basket\",\n  \"basketball\",\n  \"bass\",\n  \"bassinet\",\n  \"bassoon\",\n  \"bat\",\n  \"bath\",\n  \"bather\",\n  \"bathhouse\",\n  \"bathrobe\",\n  \"bathroom\",\n  \"bathtub\",\n  \"batter\",\n  \"battery\",\n  \"batting\",\n  \"battle\",\n  \"battleship\",\n  \"bay\",\n  \"bayou\",\n  \"beach\",\n  \"bead\",\n  \"beak\",\n  \"beam\",\n  \"bean\",\n  \"beanie\",\n  \"beanstalk\",\n  \"bear\",\n  \"beard\",\n  \"beast\",\n  \"beat\",\n  \"beautiful\",\n  \"beauty\",\n  \"beaver\",\n  \"bed\",\n  \"bedroom\",\n  \"bee\",\n  \"beech\",\n  \"beef\",\n  \"beer\",\n  \"beet\",\n  \"beetle\",\n  \"beggar\",\n  \"beginner\",\n  \"beginning\",\n  \"begonia\",\n  \"behavior\",\n  \"beheading\",\n  \"behest\",\n  \"being\",\n  \"belfry\",\n  \"belief\",\n  \"believe\",\n  \"bell\",\n  \"belligerency\",\n  \"bellows\",\n  \"belly\",\n  \"belt\",\n  \"bench\",\n  \"bend\",\n  \"beneficiary\",\n  \"benefit\",\n  \"bengal\",\n  \"beret\",\n  \"berry\",\n  \"bestseller\",\n  \"best-seller\",\n  \"bet\",\n  \"beverage\",\n  \"beyond\",\n  \"bibliography\",\n  \"bicycle\",\n  \"bid\",\n  \"bidet\",\n  \"bifocals\",\n  \"big\",\n  \"big-rig\",\n  \"bijou\",\n  \"bike\",\n  \"bikini\",\n  \"bill\",\n  \"billboard\",\n  \"bin\",\n  \"biology\",\n  \"biplane\",\n  \"birch\",\n  \"bird\",\n  \"birdbath\",\n  \"birdcage\",\n  \"birdhouse\",\n  \"bird-watcher\",\n  \"birth\",\n  \"birthday\",\n  \"bit\",\n  \"bite\",\n  \"bitter\",\n  \"black\",\n  \"blackberry\",\n  \"blackboard\",\n  \"blackfish\",\n  \"bladder\",\n  \"blade\",\n  \"blame\",\n  \"blank\",\n  \"blanket\",\n  \"blazer\",\n  \"blight\",\n  \"blind\",\n  \"blinker\",\n  \"blister\",\n  \"blizzard\",\n  \"block\",\n  \"blocker\",\n  \"blood\",\n  \"bloodflow\",\n  \"bloom\",\n  \"bloomers\",\n  \"blossom\",\n  \"blouse\",\n  \"blow\",\n  \"blowgun\",\n  \"blowhole\",\n  \"blue\",\n  \"blueberry\",\n  \"boar\",\n  \"board\",\n  \"boat\",\n  \"boat-building\",\n  \"boatload\",\n  \"boatyard\",\n  \"bobcat\",\n  \"body\",\n  \"bog\",\n  \"bolero\",\n  \"bolt\",\n  \"bomb\",\n  \"bomber\",\n  \"bondsman\",\n  \"bone\",\n  \"bongo\",\n  \"bonnet\",\n  \"bonsai\",\n  \"bonus\",\n  \"boogeyman\",\n  \"book\",\n  \"bookcase\",\n  \"bookend\",\n  \"booklet\",\n  \"booster\",\n  \"boot\",\n  \"bootee\",\n  \"bootie\",\n  \"boots\",\n  \"booty\",\n  \"border\",\n  \"bore\",\n  \"bosom\",\n  \"boss\",\n  \"botany\",\n  \"bother\",\n  \"bottle\",\n  \"bottling\",\n  \"bottom\",\n  \"bottom-line\",\n  \"boudoir\",\n  \"bough\",\n  \"boundary\",\n  \"bow\",\n  \"bower\",\n  \"bowl\",\n  \"bowler\",\n  \"bowling\",\n  \"bowtie\",\n  \"box\",\n  \"boxer\",\n  \"boxspring\",\n  \"boy\",\n  \"boyfriend\",\n  \"bra\",\n  \"brace\",\n  \"bracelet\",\n  \"bracket\",\n  \"brain\",\n  \"brake\",\n  \"branch\",\n  \"brand\",\n  \"brandy\",\n  \"brass\",\n  \"brassiere\",\n  \"bratwurst\",\n  \"brave\",\n  \"bread\",\n  \"breadcrumb\",\n  \"break\",\n  \"breakfast\",\n  \"breakpoint\",\n  \"breast\",\n  \"breastplate\",\n  \"breath\",\n  \"breeze\",\n  \"bribery\",\n  \"brick\",\n  \"bricklaying\",\n  \"bridge\",\n  \"brief\",\n  \"briefs\",\n  \"brilliant\",\n  \"british\",\n  \"broad\",\n  \"broccoli\",\n  \"brochure\",\n  \"broiler\",\n  \"broker\",\n  \"brome\",\n  \"bronchitis\",\n  \"bronco\",\n  \"bronze\",\n  \"brooch\",\n  \"brood\",\n  \"brook\",\n  \"broom\",\n  \"brother\",\n  \"brother-in-law\",\n  \"brow\",\n  \"brown\",\n  \"brush\",\n  \"brushfire\",\n  \"brushing\",\n  \"bubble\",\n  \"bucket\",\n  \"buckle\",\n  \"bud\",\n  \"buddy\",\n  \"budget\",\n  \"buffer\",\n  \"buffet\",\n  \"bug\",\n  \"buggy\",\n  \"bugle\",\n  \"building\",\n  \"bulb\",\n  \"bull\",\n  \"bulldozer\",\n  \"bullet\",\n  \"bull-fighter\",\n  \"bumper\",\n  \"bun\",\n  \"bunch\",\n  \"bungalow\",\n  \"bunghole\",\n  \"bunkhouse\",\n  \"burglar\",\n  \"burlesque\",\n  \"burn\",\n  \"burn-out\",\n  \"burst\",\n  \"bus\",\n  \"bush\",\n  \"business\",\n  \"bust\",\n  \"bustle\",\n  \"butane\",\n  \"butcher\",\n  \"butter\",\n  \"button\",\n  \"buy\",\n  \"buyer\",\n  \"buzzard\",\n  \"cabana\",\n  \"cabbage\",\n  \"cabin\",\n  \"cabinet\",\n  \"cable\",\n  \"caboose\",\n  \"cacao\",\n  \"cactus\",\n  \"caddy\",\n  \"cadet\",\n  \"cafe\",\n  \"caftan\",\n  \"cake\",\n  \"calcification\",\n  \"calculation\",\n  \"calculator\",\n  \"calculus\",\n  \"calendar\",\n  \"calf\",\n  \"calico\",\n  \"call\",\n  \"calm\",\n  \"camel\",\n  \"cameo\",\n  \"camera\",\n  \"camp\",\n  \"campaign\",\n  \"campanile\",\n  \"can\",\n  \"canal\",\n  \"cancel\",\n  \"cancer\",\n  \"candelabra\",\n  \"candidate\",\n  \"candle\",\n  \"candy\",\n  \"cane\",\n  \"cannon\",\n  \"canoe\",\n  \"canon\",\n  \"canopy\",\n  \"canteen\",\n  \"canvas\",\n  \"cap\",\n  \"cape\",\n  \"capital\",\n  \"capitulation\",\n  \"capon\",\n  \"cappelletti\",\n  \"cappuccino\",\n  \"captain\",\n  \"caption\",\n  \"car\",\n  \"caravan\",\n  \"carbon\",\n  \"card\",\n  \"cardboard\",\n  \"cardigan\",\n  \"care\",\n  \"career\",\n  \"cargo\",\n  \"carload\",\n  \"carnation\",\n  \"carol\",\n  \"carotene\",\n  \"carp\",\n  \"carpenter\",\n  \"carpet\",\n  \"carport\",\n  \"carriage\",\n  \"carrier\",\n  \"carrot\",\n  \"carry\",\n  \"cart\",\n  \"cartilage\",\n  \"cartload\",\n  \"cartoon\",\n  \"cartridge\",\n  \"cascade\",\n  \"case\",\n  \"casement\",\n  \"cash\",\n  \"cashier\",\n  \"casino\",\n  \"casserole\",\n  \"cassock\",\n  \"cast\",\n  \"castanet\",\n  \"castanets\",\n  \"castle\",\n  \"cat\",\n  \"catacomb\",\n  \"catamaran\",\n  \"catch\",\n  \"category\",\n  \"caterpillar\",\n  \"cathedral\",\n  \"catsup\",\n  \"cattle\",\n  \"cauliflower\",\n  \"cause\",\n  \"caution\",\n  \"cave\",\n  \"c-clamp\",\n  \"cd\",\n  \"ceiling\",\n  \"celebration\",\n  \"celeriac\",\n  \"celery\",\n  \"celeste\",\n  \"cell\",\n  \"cellar\",\n  \"cello\",\n  \"celsius\",\n  \"cement\",\n  \"cemetery\",\n  \"cenotaph\",\n  \"census\",\n  \"cent\",\n  \"center\",\n  \"centimeter\",\n  \"centurion\",\n  \"century\",\n  \"cephalopod\",\n  \"ceramic\",\n  \"cereal\",\n  \"certification\",\n  \"cesspool\",\n  \"chafe\",\n  \"chain\",\n  \"chainstay\",\n  \"chair\",\n  \"chairlift\",\n  \"chairman\",\n  \"chairperson\",\n  \"chaise\",\n  \"chalet\",\n  \"chalice\",\n  \"chalk\",\n  \"challenge\",\n  \"champion\",\n  \"championship\",\n  \"chance\",\n  \"chandelier\",\n  \"change\",\n  \"channel\",\n  \"chaos\",\n  \"chap\",\n  \"chapel\",\n  \"chapter\",\n  \"character\",\n  \"chard\",\n  \"charge\",\n  \"charity\",\n  \"charlatan\",\n  \"charles\",\n  \"charm\",\n  \"chart\",\n  \"chastity\",\n  \"chasuble\",\n  \"chateau\",\n  \"chauffeur\",\n  \"chauvinist\",\n  \"check\",\n  \"checkroom\",\n  \"cheek\",\n  \"cheetah\",\n  \"chef\",\n  \"chemical\",\n  \"chemistry\",\n  \"cheque\",\n  \"cherries\",\n  \"cherry\",\n  \"chess\",\n  \"chest\",\n  \"chick\",\n  \"chicken\",\n  \"chicory\",\n  \"chief\",\n  \"chiffonier\",\n  \"child\",\n  \"childhood\",\n  \"children\",\n  \"chill\",\n  \"chime\",\n  \"chimpanzee\",\n  \"chin\",\n  \"chino\",\n  \"chip\",\n  \"chipmunk\",\n  \"chit-chat\",\n  \"chivalry\",\n  \"chive\",\n  \"chocolate\",\n  \"choice\",\n  \"choker\",\n  \"chop\",\n  \"chopstick\",\n  \"chord\",\n  \"chowder\",\n  \"chrome\",\n  \"chromolithograph\",\n  \"chronograph\",\n  \"chronometer\",\n  \"chub\",\n  \"chug\",\n  \"church\",\n  \"churn\",\n  \"cicada\",\n  \"cigarette\",\n  \"cinema\",\n  \"circle\",\n  \"circulation\",\n  \"circumference\",\n  \"cirrus\",\n  \"citizenship\",\n  \"city\",\n  \"civilisation\",\n  \"claim\",\n  \"clam\",\n  \"clank\",\n  \"clapboard\",\n  \"clarinet\",\n  \"clasp\",\n  \"class\",\n  \"classic\",\n  \"classroom\",\n  \"clause\",\n  \"clave\",\n  \"clavicle\",\n  \"clavier\",\n  \"cleaner\",\n  \"cleat\",\n  \"cleavage\",\n  \"clef\",\n  \"cleric\",\n  \"clerk\",\n  \"click\",\n  \"client\",\n  \"cliff\",\n  \"climate\",\n  \"climb\",\n  \"clip\",\n  \"clipper\",\n  \"cloak\",\n  \"cloakroom\",\n  \"clock\",\n  \"clockwork\",\n  \"clogs\",\n  \"cloister\",\n  \"close\",\n  \"closet\",\n  \"cloth\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"cloudburst\",\n  \"cloudy\",\n  \"clove\",\n  \"clover\",\n  \"club\",\n  \"clue\",\n  \"clutch\",\n  \"coach\",\n  \"coal\",\n  \"coast\",\n  \"coat\",\n  \"cob\",\n  \"cobweb\",\n  \"cockpit\",\n  \"cockroach\",\n  \"cocktail\",\n  \"cocoa\",\n  \"cod\",\n  \"code\",\n  \"codon\",\n  \"codpiece\",\n  \"coevolution\",\n  \"coffee\",\n  \"coffin\",\n  \"coil\",\n  \"coin\",\n  \"coinsurance\",\n  \"coke\",\n  \"cold\",\n  \"coliseum\",\n  \"collar\",\n  \"collection\",\n  \"college\",\n  \"collision\",\n  \"colloquia\",\n  \"colon\",\n  \"colonisation\",\n  \"colony\",\n  \"color\",\n  \"colt\",\n  \"column\",\n  \"columnist\",\n  \"comb\",\n  \"combat\",\n  \"combination\",\n  \"combine\",\n  \"comfort\",\n  \"comfortable\",\n  \"comic\",\n  \"comma\",\n  \"command\",\n  \"comment\",\n  \"commerce\",\n  \"commercial\",\n  \"commission\",\n  \"committee\",\n  \"common\",\n  \"communicant\",\n  \"communication\",\n  \"community\",\n  \"company\",\n  \"comparison\",\n  \"compassion\",\n  \"competition\",\n  \"competitor\",\n  \"complaint\",\n  \"complement\",\n  \"complex\",\n  \"component\",\n  \"comportment\",\n  \"composer\",\n  \"composition\",\n  \"compost\",\n  \"comprehension\",\n  \"compulsion\",\n  \"computer\",\n  \"comradeship\",\n  \"concentrate\",\n  \"concept\",\n  \"concern\",\n  \"concert\",\n  \"conclusion\",\n  \"concrete\",\n  \"condition\",\n  \"condominium\",\n  \"condor\",\n  \"conductor\",\n  \"cone\",\n  \"confectionery\",\n  \"conference\",\n  \"confidence\",\n  \"confirmation\",\n  \"conflict\",\n  \"confusion\",\n  \"conga\",\n  \"congo\",\n  \"congress\",\n  \"congressman\",\n  \"congressperson\",\n  \"conifer\",\n  \"connection\",\n  \"consent\",\n  \"consequence\",\n  \"consideration\",\n  \"consist\",\n  \"console\",\n  \"consonant\",\n  \"conspirator\",\n  \"constant\",\n  \"constellation\",\n  \"construction\",\n  \"consul\",\n  \"consulate\",\n  \"contact\",\n  \"contact lens\",\n  \"contagion\",\n  \"content\",\n  \"contest\",\n  \"context\",\n  \"continent\",\n  \"contract\",\n  \"contrail\",\n  \"contrary\",\n  \"contribution\",\n  \"control\",\n  \"convection\",\n  \"conversation\",\n  \"convert\",\n  \"convertible\",\n  \"cook\",\n  \"cookie\",\n  \"cooking\",\n  \"coonskin\",\n  \"cope\",\n  \"cop-out\",\n  \"copper\",\n  \"co-producer\",\n  \"copy\",\n  \"copyright\",\n  \"copywriter\",\n  \"cord\",\n  \"corduroy\",\n  \"cork\",\n  \"cormorant\",\n  \"corn\",\n  \"corner\",\n  \"cornerstone\",\n  \"cornet\",\n  \"corral\",\n  \"correspondent\",\n  \"corridor\",\n  \"corruption\",\n  \"corsage\",\n  \"cost\",\n  \"costume\",\n  \"cot\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cougar\",\n  \"cough\",\n  \"council\",\n  \"councilman\",\n  \"councilor\",\n  \"councilperson\",\n  \"count\",\n  \"counter\",\n  \"counter-force\",\n  \"countess\",\n  \"country\",\n  \"county\",\n  \"couple\",\n  \"courage\",\n  \"course\",\n  \"court\",\n  \"cousin\",\n  \"covariate\",\n  \"cover\",\n  \"coverall\",\n  \"cow\",\n  \"cowbell\",\n  \"cowboy\",\n  \"crab\",\n  \"crack\",\n  \"cracker\",\n  \"crackers\",\n  \"cradle\",\n  \"craft\",\n  \"craftsman\",\n  \"crash\",\n  \"crate\",\n  \"cravat\",\n  \"craw\",\n  \"crawdad\",\n  \"crayfish\",\n  \"crayon\",\n  \"crazy\",\n  \"cream\",\n  \"creative\",\n  \"creator\",\n  \"creature\",\n  \"creche\",\n  \"credenza\",\n  \"credit\",\n  \"creditor\",\n  \"creek\",\n  \"creme brulee\",\n  \"crest\",\n  \"crew\",\n  \"crib\",\n  \"cribbage\",\n  \"cricket\",\n  \"cricketer\",\n  \"crime\",\n  \"criminal\",\n  \"crinoline\",\n  \"criteria\",\n  \"criterion\",\n  \"criticism\",\n  \"crocodile\",\n  \"crocus\",\n  \"croissant\",\n  \"crook\",\n  \"crop\",\n  \"cross\",\n  \"cross-contamination\",\n  \"cross-stitch\",\n  \"crotch\",\n  \"croup\",\n  \"crow\",\n  \"crowd\",\n  \"crown\",\n  \"crude\",\n  \"crush\",\n  \"cry\",\n  \"crystallography\",\n  \"cub\",\n  \"cuckoo\",\n  \"cucumber\",\n  \"cuff-links\",\n  \"cultivar\",\n  \"cultivator\",\n  \"culture\",\n  \"culvert\",\n  \"cummerbund\",\n  \"cup\",\n  \"cupboard\",\n  \"cupcake\",\n  \"cupola\",\n  \"curio\",\n  \"curl\",\n  \"curler\",\n  \"currency\",\n  \"current\",\n  \"cursor\",\n  \"curtain\",\n  \"curve\",\n  \"cushion\",\n  \"custard\",\n  \"customer\",\n  \"cut\",\n  \"cuticle\",\n  \"cutlet\",\n  \"cutover\",\n  \"cutting\",\n  \"cyclamen\",\n  \"cycle\",\n  \"cyclone\",\n  \"cylinder\",\n  \"cymbal\",\n  \"cymbals\",\n  \"cynic\",\n  \"cyst\",\n  \"cytoplasm\",\n  \"dad\",\n  \"daffodil\",\n  \"dagger\",\n  \"dahlia\",\n  \"daisy\",\n  \"damage\",\n  \"dame\",\n  \"dance\",\n  \"dancer\",\n  \"dancing\",\n  \"danger\",\n  \"daniel\",\n  \"dare\",\n  \"dark\",\n  \"dart\",\n  \"dash\",\n  \"dashboard\",\n  \"data\",\n  \"database\",\n  \"date\",\n  \"daughter\",\n  \"david\",\n  \"day\",\n  \"daybed\",\n  \"dead\",\n  \"deadline\",\n  \"deal\",\n  \"dealer\",\n  \"dear\",\n  \"death\",\n  \"deathwatch\",\n  \"debate\",\n  \"debt\",\n  \"debtor\",\n  \"decade\",\n  \"decimal\",\n  \"decision\",\n  \"deck\",\n  \"declination\",\n  \"decongestant\",\n  \"decrease\",\n  \"decryption\",\n  \"dedication\",\n  \"deep\",\n  \"deer\",\n  \"defense\",\n  \"deficit\",\n  \"definition\",\n  \"deformation\",\n  \"degree\",\n  \"delay\",\n  \"delete\",\n    \"delight\",\n  \"delivery\",\n  \"demand\",\n  \"demur\",\n  \"den\",\n  \"denim\",\n  \"dentist\",\n  \"deodorant\",\n  \"department\",\n  \"departure\",\n  \"dependent\",\n  \"deployment\",\n  \"deposit\",\n  \"depression\",\n  \"depressive\",\n  \"depth\",\n  \"deputy\",\n  \"derby\",\n  \"derrick\",\n  \"description\",\n  \"desert\",\n  \"design\",\n  \"designer\",\n  \"desire\",\n  \"desk\",\n  \"dessert\",\n  \"destiny\",\n  \"destroyer\",\n  \"destruction\",\n  \"detail\",\n  \"detainment\",\n  \"detective\",\n  \"detention\",\n  \"determination\",\n  \"development\",\n  \"deviance\",\n  \"device\",\n  \"devil\",\n  \"dew\",\n  \"dhow\",\n  \"diadem\",\n  \"diamond\",\n  \"diaphragm\",\n  \"diarist\",\n  \"dibble\",\n  \"dickey\",\n  \"dictaphone\",\n  \"diction\",\n  \"dictionary\",\n  \"diet\",\n  \"difference\",\n  \"differential\",\n  \"difficulty\",\n  \"dig\",\n  \"digestion\",\n  \"digger\",\n  \"digital\",\n  \"dignity\",\n  \"dilapidation\",\n  \"dill\",\n  \"dime\",\n  \"dimension\",\n  \"dimple\",\n  \"diner\",\n  \"dinghy\",\n  \"dinner\",\n  \"dinosaur\",\n  \"diploma\",\n  \"dipstick\",\n  \"direction\",\n  \"director\",\n  \"dirndl\",\n  \"dirt\",\n  \"disadvantage\",\n  \"disarmament\",\n  \"disaster\",\n  \"discipline\",\n  \"disco\",\n  \"disconnection\",\n  \"discount\",\n  \"discovery\",\n  \"discrepancy\",\n  \"discussion\",\n  \"disease\",\n  \"disembodiment\",\n  \"disengagement\",\n  \"disguise\",\n  \"disgust\",\n  \"dish\",\n  \"dishes\",\n  \"dishwasher\",\n  \"disk\",\n  \"display\",\n  \"disposer\",\n  \"distance\",\n  \"distribution\",\n  \"distributor\",\n  \"district\",\n  \"divan\",\n  \"diver\",\n  \"divide\",\n  \"divider\",\n  \"diving\",\n  \"division\",\n  \"dock\",\n  \"doctor\",\n  \"document\",\n  \"doe\",\n  \"dog\",\n  \"dogsled\",\n  \"dogwood\",\n  \"doll\",\n  \"dollar\",\n  \"dolman\",\n  \"dolphin\",\n  \"domain\",\n  \"donkey\",\n  \"door\",\n  \"doorknob\",\n  \"doorpost\",\n  \"dory\",\n  \"dot\",\n  \"double\",\n  \"doubling\",\n  \"doubt\",\n  \"doubter\",\n  \"downforce\",\n  \"downgrade\",\n  \"downtown\",\n  \"draft\",\n  \"drag\",\n  \"dragon\",\n  \"dragonfly\",\n  \"dragster\",\n  \"drain\",\n  \"drake\",\n  \"drama\",\n  \"dramaturge\",\n  \"draw\",\n  \"drawbridge\",\n  \"drawer\",\n  \"drawing\",\n  \"dream\",\n  \"dredger\",\n  \"dress\",\n  \"dresser\",\n  \"dressing\",\n  \"drill\",\n  \"drink\",\n  \"drive\",\n  \"driver\",\n  \"driveway\",\n  \"driving\",\n  \"drizzle\",\n  \"dromedary\",\n  \"drop\",\n  \"drug\",\n  \"drum\",\n  \"drummer\",\n  \"drunk\",\n  \"dry\",\n  \"dryer\",\n  \"duck\",\n  \"duckling\",\n  \"dud\",\n  \"due\",\n  \"duffel\",\n  \"dugout\",\n  \"dulcimer\",\n  \"dumbwaiter\",\n  \"dump\",\n  \"dump truck\",\n  \"dune buggy\",\n  \"dungarees\",\n  \"dungeon\",\n  \"duplexer\",\n  \"dust\",\n  \"dust storm\",\n  \"duster\",\n  \"duty\",\n  \"dwarf\",\n  \"dwelling\",\n  \"dynamo\",\n  \"eagle\",\n  \"ear\",\n  \"eardrum\",\n  \"earmuffs\",\n  \"earplug\",\n  \"earrings\",\n  \"earth\",\n  \"earthquake\",\n  \"earthworm\",\n  \"ease\",\n  \"easel\",\n  \"east\",\n  \"eat\",\n  \"eave\",\n  \"eavesdropper\",\n  \"e-book\",\n  \"ecclesia\",\n  \"eclipse\",\n  \"ecliptic\",\n  \"economics\",\n  \"economy\",\n  \"ecumenist\",\n  \"eddy\",\n  \"edge\",\n  \"edger\",\n  \"editor\",\n  \"editorial\",\n  \"education\",\n  \"edward\",\n  \"eel\",\n  \"effacement\",\n  \"effect\",\n  \"effective\",\n  \"efficacy\",\n  \"efficiency\",\n  \"effort\",\n  \"egg\",\n  \"egghead\",\n  \"eggnog\",\n  \"eggplant\",\n  \"eight\",\n  \"ejector\",\n  \"elbow\",\n  \"election\",\n  \"electricity\",\n  \"electrocardiogram\",\n  \"element\",\n  \"elephant\",\n  \"elevator\",\n  \"elixir\",\n  \"elk\",\n  \"ellipse\",\n  \"elm\",\n  \"elongation\",\n  \"embossing\",\n  \"emergence\",\n  \"emergency\",\n  \"emergent\",\n  \"emery\",\n  \"emotion\",\n  \"emphasis\",\n  \"employ\",\n  \"employee\",\n  \"employer\",\n  \"employment\",\n  \"empowerment\",\n  \"emu\",\n  \"encirclement\",\n  \"encyclopedia\",\n  \"end\",\n  \"endothelium\",\n  \"enemy\",\n  \"energy\",\n  \"engine\",\n  \"engineer\",\n  \"engineering\",\n  \"enigma\",\n  \"enjoyment\",\n  \"enquiry\",\n  \"entertainment\",\n  \"enthusiasm\",\n  \"entrance\",\n  \"entry\",\n  \"environment\",\n  \"envy\",\n  \"epauliere\",\n  \"epee\",\n  \"ephemera\",\n  \"ephemeris\",\n  \"epoch\",\n  \"eponym\",\n  \"epoxy\",\n  \"equal\",\n  \"equinox\",\n  \"equipment\",\n  \"equivalent\",\n  \"era\",\n  \"e-reader\",\n  \"error\",\n  \"escape\",\n  \"ese\",\n  \"espadrille\",\n  \"espalier\",\n  \"essay\",\n  \"establishment\",\n  \"estate\",\n  \"estimate\",\n  \"estrogen\",\n  \"estuary\",\n  \"ethernet\",\n  \"ethics\",\n  \"euphonium\",\n  \"eurocentrism\",\n  \"europe\",\n  \"evaluator\",\n  \"evening\",\n  \"evening-wear\",\n  \"event\",\n  \"eviction\",\n  \"evidence\",\n  \"evocation\",\n  \"evolution\",\n  \"exam\",\n  \"examination\",\n  \"examiner\",\n  \"example\",\n  \"exchange\",\n  \"excitement\",\n  \"exclamation\",\n  \"excuse\",\n  \"executor\",\n  \"exercise\",\n  \"exhaust\",\n  \"ex-husband\",\n  \"exile\",\n  \"existence\",\n  \"exit\",\n  \"expansion\",\n  \"expansionism\",\n  \"experience\",\n  \"expert\",\n  \"explanation\",\n  \"exposition\",\n  \"expression\",\n  \"extension\",\n  \"extent\",\n  \"external\",\n  \"extreme\",\n  \"ex-wife\",\n  \"eye\",\n  \"eyeball\",\n  \"eyebrow\",\n  \"eyebrows\",\n  \"eyeglasses\",\n  \"eyelash\",\n  \"eyelashes\",\n  \"eyelid\",\n  \"eyelids\",\n  \"eyeliner\",\n  \"eyestrain\",\n  \"face\",\n  \"facelift\",\n  \"facet\",\n  \"facilities\",\n  \"facsimile\",\n  \"fact\",\n  \"factor\",\n  \"factory\",\n  \"faculty\",\n  \"fahrenheit\",\n  \"fail\",\n  \"failure\",\n  \"fairies\",\n  \"fairy\",\n  \"faith\",\n  \"fall\",\n  \"falling-out\",\n  \"fame\",\n  \"familiar\",\n  \"family\",\n  \"fan\",\n  \"fang\",\n  \"fanlight\",\n  \"fanny\",\n  \"fanny-pack\",\n  \"farm\",\n  \"farmer\",\n  \"fascia\",\n  \"fat\",\n  \"father\",\n  \"father-in-law\",\n  \"fatigues\",\n  \"faucet\",\n  \"fault\",\n  \"fawn\",\n  \"fax\",\n  \"fear\",\n  \"feast\",\n  \"feather\",\n  \"feature\",\n  \"fedelini\",\n  \"fedora\",\n  \"fee\",\n  \"feed\",\n  \"feedback\",\n  \"feel\",\n  \"feeling\",\n  \"feet\",\n  \"felony\",\n  \"female\",\n  \"fen\",\n  \"fence\",\n  \"fencing\",\n  \"fender\",\n  \"ferry\",\n  \"ferryboat\",\n  \"fertilizer\",\n  \"few\",\n  \"fiber\",\n  \"fiberglass\",\n  \"fibre\",\n  \"fiction\",\n  \"fiddle\",\n  \"field\",\n  \"fifth\",\n  \"fight\",\n  \"fighter\",\n  \"figure\",\n  \"figurine\",\n  \"file\",\n  \"fill\",\n  \"filly\",\n  \"film\",\n  \"filth\",\n  \"final\",\n  \"finance\",\n  \"find\",\n  \"finding\",\n  \"fine\",\n  \"finger\",\n  \"fingernail\",\n  \"finish\",\n  \"finisher\",\n  \"fir\",\n  \"fire\",\n  \"fireman\",\n  \"fireplace\",\n  \"firewall\",\n  \"fish\",\n  \"fishbone\",\n  \"fisherman\",\n  \"fishery\",\n  \"fishing\",\n  \"fishmonger\",\n  \"fishnet\",\n  \"fisting\",\n  \"fix\",\n  \"fixture\",\n  \"flag\",\n  \"flame\",\n  \"flanker\",\n  \"flare\",\n  \"flash\",\n  \"flat\",\n  \"flatboat\",\n  \"flavor\",\n  \"flax\",\n  \"fleck\",\n  \"fleece\",\n  \"flesh\",\n  \"flight\",\n  \"flintlock\",\n  \"flip-flops\",\n  \"flock\",\n  \"flood\",\n  \"floor\",\n  \"floozie\",\n  \"flour\",\n  \"flow\",\n  \"flower\",\n  \"flu\",\n  \"flugelhorn\",\n  \"fluke\",\n  \"flute\",\n  \"fly\",\n  \"flytrap\",\n  \"foam\",\n  \"fob\",\n  \"focus\",\n  \"fog\",\n  \"fold\",\n  \"folder\",\n  \"following\",\n  \"fondue\",\n  \"font\",\n  \"food\",\n  \"foot\",\n  \"football\",\n  \"footnote\",\n  \"footrest\",\n  \"foot-rest\",\n  \"footstool\",\n  \"foray\",\n  \"force\",\n  \"forearm\",\n  \"forebear\",\n  \"forecast\",\n  \"forehead\",\n  \"forest\",\n  \"forestry\",\n  \"forever\",\n  \"forgery\",\n  \"fork\",\n  \"form\",\n  \"formal\",\n  \"format\",\n  \"former\",\n  \"fort\",\n  \"fortnight\",\n  \"fortress\",\n  \"fortune\",\n  \"forum\",\n  \"foundation\",\n  \"fountain\",\n  \"fowl\",\n  \"fox\",\n  \"foxglove\",\n  \"fragrance\",\n  \"frame\",\n  \"fratricide\",\n  \"fraudster\",\n  \"frazzle\",\n  \"freckle\",\n  \"freedom\",\n  \"freeplay\",\n  \"freeze\",\n  \"freezer\",\n  \"freight\",\n  \"freighter\",\n  \"freon\",\n  \"fresco\",\n  \"friction\",\n  \"fridge\",\n  \"friend\",\n  \"friendship\",\n  \"frigate\",\n  \"fringe\",\n  \"frock\",\n  \"frog\",\n  \"front\",\n  \"frost\",\n  \"frown\",\n  \"fruit\",\n  \"frustration\",\n  \"fuel\",\n  \"fulfillment\",\n  \"full\",\n  \"fun\",\n  \"function\",\n  \"fundraising\",\n  \"funeral\",\n  \"funny\",\n  \"fur\",\n  \"furnace\",\n  \"furniture\",\n  \"fusarium\",\n  \"futon\",\n  \"future\",\n  \"gaffer\",\n  \"gain\",\n  \"gaiters\",\n  \"gale\",\n  \"gall-bladder\",\n  \"gallery\",\n  \"galley\",\n  \"gallon\",\n  \"galn\",\n  \"galoshes\",\n  \"game\",\n  \"gamebird\",\n  \"gamma-ray\",\n  \"gander\",\n  \"gap\",\n  \"garage\",\n  \"garb\",\n  \"garbage\",\n  \"garden\",\n  \"garlic\",\n  \"garment\",\n  \"garter\",\n  \"gas\",\n  \"gasoline\",\n  \"gastropod\",\n  \"gate\",\n  \"gateway\",\n  \"gather\",\n  \"gauge\",\n  \"gauntlet\",\n  \"gazebo\",\n  \"gazelle\",\n  \"gear\",\n  \"gearshift\",\n  \"geese\",\n  \"gelding\",\n  \"gem\",\n  \"gemsbok\",\n  \"gender\",\n  \"gene\",\n  \"general\",\n  \"genetics\",\n  \"geography\",\n  \"geology\",\n  \"geometry\",\n  \"george\",\n  \"geranium\",\n  \"gerbil\",\n  \"geyser\",\n  \"gherkin\",\n  \"ghost\",\n  \"giant\",\n  \"gift\",\n  \"gigantism\",\n  \"ginseng\",\n  \"giraffe\",\n  \"girdle\",\n  \"girl\",\n  \"girlfriend\",\n  \"git\",\n  \"give\",\n  \"glad\",\n  \"gladiolus\",\n  \"gland\",\n  \"glass\",\n  \"glasses\",\n  \"glen\",\n  \"glider\",\n  \"gliding\",\n  \"glockenspiel\",\n  \"glove\",\n  \"gloves\",\n  \"glue\",\n  \"glut\",\n  \"go\",\n  \"goal\",\n  \"goat\",\n  \"gobbler\",\n  \"god\",\n  \"godmother\",\n  \"goggles\",\n  \"go-kart\",\n  \"gold\",\n  \"goldfish\",\n  \"golf\",\n  \"gondola\",\n  \"gong\",\n  \"good\",\n  \"goodbye\",\n  \"good-bye\",\n  \"goodie\",\n  \"goose\",\n  \"gopher\",\n  \"gore-tex\",\n  \"gorilla\",\n  \"gosling\",\n  \"gossip\",\n  \"governance\",\n  \"government\",\n  \"governor\",\n  \"gown\",\n  \"grab\",\n  \"grab-bag\",\n  \"grade\",\n  \"grain\",\n  \"gram\",\n  \"grammar\",\n  \"grand\",\n  \"granddaughter\",\n  \"grandfather\",\n  \"grandmom\",\n  \"grandmother\",\n  \"grandson\",\n  \"granny\",\n  \"grape\",\n  \"grapefruit\",\n  \"graph\",\n  \"graphic\",\n  \"grass\",\n  \"grasshopper\",\n  \"grassland\",\n  \"gratitude\",\n  \"gray\",\n  \"grease\",\n  \"great\",\n  \"great-grandfather\",\n  \"great-grandmother\",\n  \"greek\",\n  \"green\",\n  \"greenhouse\",\n  \"grenade\",\n  \"grey\",\n  \"grief\",\n  \"grill\",\n  \"grip\",\n  \"grit\",\n  \"grocery\",\n  \"ground\",\n  \"group\",\n  \"grouper\",\n  \"grouse\",\n  \"growth\",\n  \"guarantee\",\n  \"guard\",\n  \"guess\",\n  \"guest\",\n  \"guestbook\",\n  \"guidance\",\n  \"guide\",\n  \"guilt\",\n  \"guilty\",\n  \"guitar\",\n  \"guitarist\",\n  \"gum\",\n  \"gumshoes\",\n  \"gun\",\n  \"gutter\",\n  \"guy\",\n  \"gym\",\n  \"gymnast\",\n  \"gymnastics\",\n  \"gynaecology\",\n  \"gyro\",\n  \"habit\",\n  \"hacienda\",\n  \"hacksaw\",\n  \"hackwork\",\n  \"hail\",\n  \"hair\",\n  \"haircut\",\n  \"half\",\n  \"half-brother\",\n  \"half-sister\",\n  \"halibut\",\n  \"hall\",\n  \"hallway\",\n  \"hamaki\",\n  \"hamburger\",\n  \"hammer\",\n  \"hammock\",\n  \"hamster\",\n  \"hand\",\n  \"handball\",\n  \"hand-holding\",\n  \"handicap\",\n  \"handle\",\n  \"handlebar\",\n  \"handmaiden\",\n  \"handsaw\",\n  \"hang\",\n  \"happiness\",\n  \"harbor\",\n  \"harbour\",\n  \"hardboard\",\n  \"hardcover\",\n  \"hardening\",\n  \"hardhat\",\n  \"hard-hat\",\n  \"hardware\",\n  \"harm\",\n  \"harmonica\",\n  \"harmony\",\n  \"harp\",\n  \"harpooner\",\n  \"harpsichord\",\n  \"hassock\",\n  \"hat\",\n  \"hatbox\",\n  \"hatchet\",\n  \"hate\",\n  \"hatred\",\n  \"haunt\",\n  \"haversack\",\n  \"hawk\",\n  \"hay\",\n  \"head\",\n  \"headlight\",\n  \"headline\",\n  \"headrest\",\n  \"health\",\n  \"hearing\",\n  \"heart\",\n  \"heartache\",\n  \"hearth\",\n  \"hearthside\",\n  \"heart-throb\",\n  \"heartwood\",\n  \"heat\",\n  \"heater\",\n  \"heaven\",\n  \"heavy\",\n  \"hedge\",\n  \"hedgehog\",\n  \"heel\",\n  \"height\",\n  \"heirloom\",\n  \"helen\",\n  \"helicopter\",\n  \"helium\",\n  \"hell\",\n  \"hellcat\",\n  \"hello\",\n  \"helmet\",\n  \"helo\",\n  \"help\",\n  \"hemp\",\n  \"hen\",\n  \"herb\",\n  \"heron\",\n  \"herring\",\n  \"hexagon\",\n  \"heyday\",\n  \"hide\",\n  \"high\",\n  \"highlight\",\n  \"high-rise\",\n  \"highway\",\n  \"hill\",\n  \"hip\",\n  \"hippodrome\",\n  \"hippopotamus\",\n  \"hire\",\n  \"history\",\n  \"hit\",\n  \"hive\",\n  \"hobbies\",\n  \"hobbit\",\n  \"hobby\",\n  \"hockey\",\n  \"hoe\",\n  \"hog\",\n  \"hold\",\n  \"hole\",\n  \"holiday\",\n  \"home\",\n  \"homework\",\n  \"homogenate\",\n  \"homonym\",\n  \"honesty\",\n  \"honey\",\n  \"honeybee\",\n  \"honoree\",\n  \"hood\",\n  \"hoof\",\n  \"hook\",\n  \"hope\",\n  \"hops\",\n  \"horn\",\n  \"hornet\",\n  \"horror\",\n  \"horse\",\n  \"hose\",\n  \"hosiery\",\n  \"hospice\",\n  \"hospital\",\n  \"hospitality\",\n  \"host\",\n  \"hostel\",\n  \"hostess\",\n  \"hot\",\n  \"hot-dog\",\n  \"hotel\",\n  \"hour\",\n  \"hourglass\",\n  \"house\",\n  \"houseboat\",\n  \"housework\",\n  \"housing\",\n  \"hovel\",\n  \"hovercraft\",\n  \"howitzer\",\n  \"hub\",\n  \"hubcap\",\n  \"hugger\",\n  \"human\",\n  \"humidity\",\n  \"humor\",\n  \"humour\",\n  \"hunger\",\n  \"hunt\",\n  \"hurdler\",\n  \"hurricane\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hut\",\n  \"hutch\",\n  \"hyacinth\",\n  \"hybridisation\",\n  \"hydrant\",\n  \"hydraulics\",\n  \"hydrofoil\",\n  \"hydrogen\",\n  \"hyena\",\n  \"hygienic\",\n  \"hyphenation\",\n  \"hypochondria\",\n  \"hypothermia\",\n  \"ice\",\n  \"icebreaker\",\n  \"icecream\",\n  \"ice-cream\",\n  \"icicle\",\n  \"icon\",\n  \"idea\",\n  \"ideal\",\n  \"if\",\n  \"igloo\",\n  \"ikebana\",\n  \"illegal\",\n  \"image\",\n  \"imagination\",\n  \"impact\",\n  \"implement\",\n  \"importance\",\n  \"impress\",\n  \"impression\",\n  \"imprisonment\",\n  \"improvement\",\n  \"impudence\",\n  \"impulse\",\n  \"inbox\",\n  \"incandescence\",\n  \"inch\",\n  \"incident\",\n  \"income\",\n  \"increase\",\n  \"independence\",\n  \"independent\",\n  \"index\",\n  \"indication\",\n  \"indigence\",\n  \"individual\",\n  \"industry\",\n  \"inevitable\",\n  \"infancy\",\n  \"inflammation\",\n  \"inflation\",\n  \"influence\",\n  \"information\",\n  \"infusion\",\n  \"inglenook\",\n  \"ingrate\",\n  \"initial\",\n  \"initiative\",\n  \"in-joke\",\n  \"injury\",\n  \"injustice\",\n  \"ink\",\n  \"in-laws\",\n  \"inlay\",\n  \"inn\",\n  \"innervation\",\n  \"innocence\",\n  \"innocent\",\n  \"input\",\n  \"inquiry\",\n  \"inscription\",\n  \"insect\",\n  \"inside\",\n  \"insolence\",\n  \"inspection\",\n  \"inspector\",\n  \"instance\",\n  \"instruction\",\n  \"instrument\",\n  \"instrumentalist\",\n  \"instrumentation\",\n  \"insulation\",\n  \"insurance\",\n  \"insurgence\",\n  \"intelligence\",\n  \"intention\",\n  \"interaction\",\n  \"interactive\",\n  \"interest\",\n  \"interferometer\",\n  \"interior\",\n  \"interloper\",\n  \"internal\",\n  \"international\",\n  \"internet\",\n  \"interpreter\",\n  \"intervenor\",\n  \"interview\",\n  \"interviewer\",\n  \"intestine\",\n  \"intestines\",\n  \"introduction\",\n  \"invention\",\n  \"inventor\",\n  \"inventory\",\n  \"investment\",\n  \"invite\",\n  \"invoice\",\n  \"iridescence\",\n  \"iris\",\n  \"iron\",\n  \"ironclad\",\n  \"irony\",\n  \"island\",\n  \"issue\",\n  \"it\",\n  \"item\",\n  \"jackal\",\n  \"jacket\",\n  \"jaguar\",\n  \"jail\",\n  \"jailhouse\",\n  \"jam\",\n  \"james\",\n  \"jar\",\n  \"jasmine\",\n  \"jaw\",\n  \"jealousy\",\n  \"jeans\",\n  \"jeep\",\n  \"jeff\",\n  \"jelly\",\n  \"jellyfish\",\n  \"jet\",\n  \"jewel\",\n  \"jewelry\",\n  \"jiffy\",\n  \"job\",\n  \"jockey\",\n  \"jodhpurs\",\n  \"joey\",\n  \"jogging\",\n  \"join\",\n  \"joint\",\n  \"joke\",\n  \"jot\",\n  \"journey\",\n  \"joy\",\n  \"judge\",\n  \"judgment\",\n  \"judo\",\n  \"juggernaut\",\n  \"juice\",\n  \"jumbo\",\n  \"jump\",\n  \"jumper\",\n  \"jumpsuit\",\n  \"junior\",\n  \"junk\",\n  \"junker\",\n  \"junket\",\n  \"jury\",\n  \"justice\",\n  \"jute\",\n  \"kale\",\n  \"kamikaze\",\n  \"kangaroo\",\n  \"karate\",\n  \"karen\",\n  \"kayak\",\n  \"kazoo\",\n  \"keep\",\n  \"kendo\",\n  \"ketch\",\n  \"ketchup\",\n  \"kettle\",\n  \"kettledrum\",\n  \"key\",\n  \"keyboard\",\n  \"keyboarding\",\n  \"keystone\",\n  \"kick\",\n  \"kick-off\",\n  \"kid\",\n  \"kidney\",\n  \"kidneys\",\n  \"kielbasa\",\n  \"kill\",\n  \"kilogram\",\n  \"kilometer\",\n  \"kilt\",\n  \"kimono\",\n  \"kind\",\n  \"kindness\",\n  \"king\",\n  \"kingfish\",\n  \"kiosk\",\n  \"kiss\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"kleenex\",\n  \"klomps\",\n  \"knee\",\n  \"kneejerk\",\n  \"knickers\",\n  \"knife\",\n  \"knife-edge\",\n  \"knight\",\n  \"knitting\",\n  \"knot\",\n  \"knowledge\",\n  \"knuckle\",\n  \"koala\",\n  \"kohlrabi\",\n  \"lab\",\n  \"laborer\",\n  \"labour\",\n  \"lace\",\n  \"lack\",\n  \"lacquerware\",\n  \"ladder\",\n  \"lady\",\n  \"ladybug\",\n  \"lake\",\n  \"lamb\",\n  \"lamp\",\n  \"lan\",\n  \"lanai\",\n  \"land\",\n  \"landform\",\n  \"landmine\",\n  \"landscape\",\n  \"language\",\n  \"lantern\",\n  \"lap\",\n  \"laparoscope\",\n  \"lapdog\",\n  \"laptop\",\n  \"larch\",\n  \"larder\",\n  \"lark\",\n  \"laryngitis\",\n  \"lasagna\",\n  \"latency\",\n  \"latex\",\n  \"lathe\",\n  \"latte\",\n  \"laugh\",\n  \"laughter\",\n  \"laundry\",\n  \"lava\",\n  \"law\",\n  \"lawn\",\n  \"lawsuit\",\n  \"lawyer\",\n  \"lay\",\n  \"layer\",\n  \"lead\",\n  \"leader\",\n  \"leadership\",\n  \"leading\",\n  \"leaf\",\n  \"league\",\n  \"leaker\",\n  \"learning\",\n  \"leash\",\n  \"leather\",\n  \"leave\",\n  \"leaver\",\n  \"lecture\",\n  \"leek\",\n  \"leg\",\n  \"legal\",\n  \"legging\",\n  \"legume\",\n  \"lei\",\n  \"leisure\",\n  \"lemon\",\n  \"lemonade\",\n  \"lemur\",\n  \"length\",\n  \"lentil\",\n  \"leprosy\",\n  \"lesson\",\n  \"let\",\n  \"letter\",\n  \"lettuce\",\n  \"level\",\n  \"lever\",\n  \"leverage\",\n  \"license\",\n  \"lie\",\n  \"lier\",\n  \"life\",\n  \"lift\",\n  \"light\",\n  \"lighting\",\n  \"lightning\",\n  \"lilac\",\n  \"lily\",\n  \"limit\",\n  \"limo\",\n  \"line\",\n  \"linen\",\n  \"liner\",\n  \"linguistics\",\n  \"link\",\n  \"linseed\",\n  \"lion\",\n  \"lip\",\n  \"lipstick\",\n  \"liquid\",\n  \"liquor\",\n  \"lisa\",\n  \"list\",\n  \"listen\",\n  \"literature\",\n  \"litigation\",\n  \"litter\",\n  \"liver\",\n  \"livestock\",\n  \"living\",\n  \"lizard\",\n  \"llama\",\n  \"load\",\n  \"loaf\",\n  \"loafer\",\n  \"loan\",\n  \"lobotomy\",\n  \"lobster\",\n  \"local\",\n  \"location\",\n  \"lock\",\n  \"locker\",\n  \"locket\",\n  \"locomotive\",\n  \"locust\",\n  \"loft\",\n  \"log\",\n  \"loggia\",\n  \"logic\",\n  \"loincloth\",\n  \"loneliness\",\n  \"long\",\n  \"look\",\n  \"loss\",\n  \"lot\",\n  \"lotion\",\n  \"lounge\",\n  \"lout\",\n  \"love\",\n  \"low\",\n  \"loyalty\",\n  \"luck\",\n  \"luggage\",\n  \"lumber\",\n  \"lumberman\",\n  \"lunch\",\n  \"luncheonette\",\n  \"lunchroom\",\n  \"lung\",\n  \"lunge\",\n  \"lute\",\n  \"luttuce\",\n  \"lycra\",\n  \"lye\",\n  \"lymphocyte\",\n  \"lynx\",\n  \"lyocell\",\n  \"lyre\",\n  \"lyric\",\n  \"macadamia\",\n  \"macaroni\",\n  \"machine\",\n  \"machinery\",\n  \"macrame\",\n  \"macrofauna\",\n  \"maelstrom\",\n  \"maestro\",\n  \"magazine\",\n  \"magic\",\n  \"maid\",\n  \"maiden\",\n  \"mail\",\n  \"mailbox\",\n  \"mailman\",\n  \"main\",\n  \"maintenance\",\n  \"major\",\n  \"major-league\",\n  \"make\",\n  \"makeup\",\n  \"male\",\n  \"mall\",\n  \"mallet\",\n  \"mambo\",\n  \"mammoth\",\n  \"man\",\n  \"management\",\n  \"manager\",\n  \"mandarin\",\n  \"mandolin\",\n  \"mangrove\",\n  \"manhunt\",\n  \"maniac\",\n  \"manicure\",\n  \"mankind\",\n  \"manner\",\n  \"manor\",\n  \"mansard\",\n  \"manservant\",\n  \"mansion\",\n  \"mantel\",\n  \"mantle\",\n  \"mantua\",\n  \"manufacturer\",\n  \"manx\",\n  \"many\",\n  \"map\",\n  \"maple\",\n  \"maraca\",\n  \"maracas\",\n  \"marble\",\n  \"mare\",\n  \"margin\",\n  \"mariachi\",\n  \"marimba\",\n  \"mark\",\n  \"market\",\n  \"marketing\",\n  \"marksman\",\n  \"marriage\",\n  \"marsh\",\n  \"marshland\",\n  \"marxism\",\n  \"mascara\",\n  \"mask\",\n  \"mass\",\n  \"massage\",\n  \"master\",\n  \"mastication\",\n  \"mastoid\",\n  \"mat\",\n  \"match\",\n  \"mate\",\n  \"material\",\n  \"math\",\n  \"mathematics\",\n  \"matter\",\n  \"mattock\",\n  \"mattress\",\n  \"maximum\",\n  \"maybe\",\n  \"mayonnaise\",\n  \"mayor\",\n  \"meal\",\n  \"meaning\",\n  \"measles\",\n  \"measure\",\n  \"measurement\",\n  \"meat\",\n  \"mechanic\",\n  \"media\",\n  \"medicine\",\n  \"medium\",\n  \"meet\",\n  \"meeting\",\n  \"megaliac\",\n  \"melody\",\n  \"member\",\n  \"membership\",\n  \"memory\",\n  \"men\",\n  \"menorah\",\n  \"mention\",\n  \"menu\",\n  \"mercury\",\n  \"mess\",\n  \"message\",\n  \"metal\",\n  \"metallurgist\",\n  \"meteor\",\n  \"meteorology\",\n  \"meter\",\n  \"methane\",\n  \"method\",\n  \"methodology\",\n  \"metro\",\n  \"metronome\",\n  \"mezzanine\",\n  \"mice\",\n  \"microlending\",\n  \"microwave\",\n  \"mid-course\",\n  \"middle\",\n  \"middleman\",\n  \"midi\",\n  \"midline\",\n  \"midnight\",\n  \"midwife\",\n  \"might\",\n  \"migrant\",\n  \"mile\",\n  \"milk\",\n  \"milkshake\",\n  \"millennium\",\n  \"millimeter\",\n  \"millisecond\",\n  \"mime\",\n  \"mimosa\",\n  \"mind\",\n  \"mine\",\n  \"mini\",\n  \"minibus\",\n  \"minimum\",\n  \"minion\",\n  \"mini-skirt\",\n  \"minister\",\n  \"minor\",\n  \"minor-league\",\n  \"mint\",\n  \"minute\",\n  \"mirror\",\n  \"miscarriage\",\n  \"miscommunication\",\n  \"misfit\",\n  \"misogyny\",\n  \"misplacement\",\n  \"misreading\",\n  \"miss\",\n  \"missile\",\n  \"mission\",\n  \"mist\",\n  \"mistake\",\n  \"mister\",\n  \"miter\",\n  \"mitten\",\n  \"mix\",\n  \"mixer\",\n  \"mixture\",\n  \"moat\",\n  \"mobile\",\n  \"moccasins\",\n  \"mocha\",\n  \"mode\",\n  \"model\",\n  \"modem\",\n  \"mole\",\n  \"mom\",\n  \"moment\",\n  \"monastery\",\n  \"monasticism\",\n  \"money\",\n  \"monger\",\n  \"monitor\",\n  \"monkey\",\n  \"monocle\",\n  \"monotheism\",\n  \"monsoon\",\n  \"monster\",\n  \"month\",\n  \"mood\",\n  \"moon\",\n  \"moonscape\",\n  \"moonshine\",\n  \"mop\",\n  \"morning\",\n  \"morsel\",\n  \"mortgage\",\n  \"mortise\",\n  \"mosque\",\n  \"mosquito\",\n  \"most\",\n  \"motel\",\n  \"moth\",\n  \"mother\",\n  \"mother-in-law\",\n  \"motion\",\n  \"motor\",\n  \"motorboat\",\n  \"motorcar\",\n  \"motorcycle\",\n  \"mound\",\n  \"mountain\",\n  \"mouse\",\n  \"mouser\",\n  \"mousse\",\n  \"moustache\",\n  \"mouth\",\n  \"mouton\",\n  \"move\",\n  \"mover\",\n  \"movie\",\n  \"mower\",\n  \"mud\",\n  \"mug\",\n  \"mukluk\",\n  \"mule\",\n  \"multimedia\",\n  \"muscle\",\n  \"musculature\",\n  \"museum\",\n  \"music\",\n  \"music-box\",\n  \"music-making\",\n  \"mustache\",\n  \"mustard\",\n  \"mutt\",\n  \"mycoplasma\",\n  \"n\",\n  \"nail\",\n  \"name\",\n  \"naming\",\n  \"nanoparticle\",\n  \"napkin\",\n  \"nasty\",\n  \"nation\",\n  \"national\",\n  \"native\",\n  \"natural\",\n  \"naturalisation\",\n  \"nature\",\n  \"neat\",\n  \"necessary\",\n  \"neck\",\n  \"necklace\",\n  \"necktie\",\n  \"need\",\n  \"needle\",\n  \"negative\",\n  \"negligee\",\n  \"negotiation\",\n  \"neologism\",\n  \"neon\",\n  \"nephew\",\n  \"nerve\",\n  \"nest\",\n  \"net\",\n  \"netball\",\n  \"netbook\",\n  \"netsuke\",\n  \"network\",\n  \"neurobiologist\",\n  \"neuropathologist\",\n  \"neuropsychiatry\",\n  \"news\",\n  \"newspaper\",\n  \"newsprint\",\n  \"newsstand\",\n  \"nexus\",\n  \"nicety\",\n  \"niche\",\n  \"nickel\",\n  \"niece\",\n  \"night\",\n  \"nightclub\",\n  \"nightgown\",\n  \"nightingale\",\n  \"nightlight\",\n  \"nitrogen\",\n  \"nobody\",\n  \"node\",\n  \"noise\",\n  \"nonbeliever\",\n  \"nonconformist\",\n  \"nondisclosure\",\n  \"nonsense\",\n  \"noodle\",\n  \"normal\",\n  \"norse\",\n  \"north\",\n  \"nose\",\n  \"note\",\n  \"notebook\",\n  \"nothing\",\n  \"notice\",\n  \"notify\",\n  \"notoriety\",\n  \"nougat\",\n  \"novel\",\n  \"nudge\",\n  \"number\",\n  \"numeracy\",\n  \"numeric\",\n  \"numismatist\",\n  \"nurse\",\n  \"nursery\",\n  \"nurture\",\n  \"nut\",\n  \"nutrition\",\n  \"nylon\",\n  \"oak\",\n  \"oar\",\n  \"oasis\",\n  \"oatmeal\",\n  \"obedience\",\n  \"obesity\",\n  \"obi\",\n  \"object\",\n  \"objective\",\n  \"obligation\",\n  \"oboe\",\n  \"observation\",\n  \"observatory\",\n  \"occasion\",\n  \"occupation\",\n  \"ocean\",\n  \"ocelot\",\n  \"octagon\",\n  \"octave\",\n  \"octavo\",\n  \"octet\",\n  \"octopus\",\n  \"odometer\",\n  \"oeuvre\",\n  \"offence\",\n  \"offer\",\n  \"office\",\n  \"officer\",\n  \"official\",\n  \"off-ramp\",\n  \"oil\",\n  \"okra\",\n  \"oldie\",\n  \"olive\",\n  \"omega\",\n  \"omelet\",\n  \"oncology\",\n  \"one\",\n  \"onion\",\n  \"open\",\n  \"opening\",\n  \"opera\",\n  \"operation\",\n  \"ophthalmologist\",\n  \"opinion\",\n  \"opium\",\n  \"opossum\",\n  \"opportunist\",\n  \"opportunity\",\n  \"opposite\",\n  \"option\",\n  \"orange\",\n  \"orangutan\",\n  \"orator\",\n  \"orchard\",\n  \"orchestra\",\n  \"orchid\",\n  \"order\",\n  \"ordinary\",\n  \"ordination\",\n  \"organ\",\n  \"organisation\",\n  \"organization\",\n  \"original\",\n  \"ornament\",\n  \"osmosis\",\n  \"osprey\",\n  \"ostrich\",\n  \"other\",\n  \"others\",\n  \"ott\",\n  \"otter\",\n  \"ounce\",\n  \"outback\",\n  \"outcome\",\n  \"outfit\",\n  \"outhouse\",\n  \"outlay\",\n  \"output\",\n  \"outrigger\",\n  \"outset\",\n  \"outside\",\n  \"oval\",\n  \"ovary\",\n  \"oven\",\n  \"overcharge\",\n  \"overclocking\",\n  \"overcoat\",\n  \"overexertion\",\n  \"overflight\",\n  \"overnighter\",\n  \"overshoot\",\n  \"owl\",\n  \"owner\",\n  \"ox\",\n  \"oxen\",\n  \"oxford\",\n  \"oxygen\",\n  \"oyster\",\n  \"pace\",\n  \"pacemaker\",\n  \"pack\",\n  \"package\",\n  \"packet\",\n  \"pad\",\n  \"paddle\",\n  \"paddock\",\n  \"page\",\n  \"pagoda\",\n  \"pail\",\n  \"pain\",\n  \"paint\",\n  \"painter\",\n  \"painting\",\n  \"paintwork\",\n  \"pair\",\n  \"pajama\",\n  \"pajamas\",\n  \"palm\",\n  \"pamphlet\",\n  \"pan\",\n  \"pancake\",\n  \"pancreas\",\n  \"panda\",\n  \"panic\",\n  \"pannier\",\n  \"panpipe\",\n  \"pansy\",\n  \"panther\",\n  \"panties\",\n  \"pantologist\",\n  \"pantology\",\n  \"pantry\",\n  \"pants\",\n  \"pantsuit\",\n  \"panty\",\n  \"pantyhose\",\n  \"paper\",\n  \"paperback\",\n  \"parable\",\n  \"parachute\",\n  \"parade\",\n  \"parallelogram\",\n  \"paramedic\",\n  \"parcel\",\n  \"parchment\",\n  \"pard\",\n  \"parent\",\n  \"parentheses\",\n  \"park\",\n  \"parka\",\n  \"parking\",\n  \"parrot\",\n  \"parsnip\",\n  \"part\",\n  \"participant\",\n  \"particle\",\n  \"particular\",\n  \"partner\",\n  \"partridge\",\n  \"party\",\n  \"pass\",\n  \"passage\",\n  \"passbook\",\n  \"passenger\",\n  \"passion\",\n  \"passive\",\n  \"past\",\n  \"pasta\",\n  \"paste\",\n  \"pastor\",\n  \"pastoralist\",\n  \"pastry\",\n  \"patch\",\n  \"path\",\n  \"patience\",\n  \"patient\",\n  \"patina\",\n  \"patio\",\n  \"patriarch\",\n  \"patricia\",\n  \"patrimony\",\n  \"patriot\",\n  \"patrol\",\n  \"pattern\",\n  \"pause\",\n  \"pavement\",\n  \"pavilion\",\n  \"paw\",\n  \"pawnshop\",\n  \"pay\",\n  \"payee\",\n  \"payment\",\n  \"pea\",\n  \"peace\",\n  \"peach\",\n  \"peacoat\",\n  \"peacock\",\n  \"peak\",\n  \"peanut\",\n  \"pear\",\n  \"pearl\",\n  \"pedal\",\n  \"peen\",\n  \"peer\",\n  \"peer-to-peer\",\n  \"pegboard\",\n  \"pelican\",\n  \"pelt\",\n  \"pen\",\n  \"penalty\",\n  \"pencil\",\n  \"pendant\",\n  \"pendulum\",\n  \"penicillin\",\n  \"pension\",\n  \"pentagon\",\n  \"peony\",\n  \"people\",\n  \"pepper\",\n  \"percentage\",\n  \"perception\",\n  \"perch\",\n  \"performance\",\n  \"perfume\",\n  \"period\",\n  \"periodical\",\n  \"peripheral\",\n  \"permafrost\",\n  \"permission\",\n  \"permit\",\n  \"perp\",\n  \"person\",\n  \"personal\",\n  \"personality\",\n  \"perspective\",\n  \"pest\",\n  \"pet\",\n  \"petal\",\n  \"petticoat\",\n  \"pew\",\n  \"pha\",\n  \"pharmacist\",\n  \"pharmacopoeia\",\n  \"phase\",\n  \"pheasant\",\n  \"philosopher\",\n  \"philosophy\",\n  \"phone\",\n  \"photo\",\n  \"photographer\",\n  \"phrase\",\n  \"physical\",\n  \"physics\",\n  \"pianist\",\n  \"piano\",\n  \"piccolo\",\n  \"pick\",\n  \"pickax\",\n  \"picket\",\n  \"pickle\",\n  \"picture\",\n  \"pie\",\n  \"piece\",\n  \"pier\",\n  \"piety\",\n  \"pig\",\n  \"pigeon\",\n  \"pike\",\n  \"pile\",\n  \"pilgrimage\",\n  \"pillbox\",\n  \"pillow\",\n  \"pilot\",\n  \"pimp\",\n  \"pimple\",\n  \"pin\",\n  \"pinafore\",\n  \"pince-nez\",\n  \"pine\",\n  \"pineapple\",\n  \"pinecone\",\n  \"ping\",\n  \"pink\",\n  \"pinkie\",\n  \"pinstripe\",\n  \"pint\",\n  \"pinto\",\n  \"pinworm\",\n  \"pioneer\",\n  \"pipe\",\n  \"piracy\",\n  \"piss\",\n  \"pitch\",\n  \"pitching\",\n  \"pith\",\n  \"pizza\",\n  \"place\",\n  \"plain\",\n  \"plan\",\n  \"plane\",\n  \"planet\",\n  \"plant\",\n  \"plantation\",\n  \"planter\",\n  \"plaster\",\n  \"plasterboard\",\n  \"plastic\",\n  \"plate\",\n  \"platform\",\n  \"platinum\",\n  \"platypus\",\n  \"play\",\n  \"player\",\n  \"playground\",\n  \"playroom\",\n  \"pleasure\",\n  \"pleated\",\n  \"plenty\",\n  \"plier\",\n  \"plot\",\n  \"plough\",\n  \"plover\",\n  \"plow\",\n  \"plowman\",\n  \"plume\",\n  \"plunger\",\n  \"plywood\",\n  \"pneumonia\",\n  \"pocket\",\n  \"pocketbook\",\n  \"pocket-watch\",\n  \"poem\",\n  \"poet\",\n  \"poetry\",\n  \"poignance\",\n  \"point\",\n  \"poison\",\n  \"poisoning\",\n  \"pole\",\n  \"polenta\",\n  \"police\",\n  \"policeman\",\n  \"policy\",\n  \"polish\",\n  \"politics\",\n  \"pollution\",\n  \"polo\",\n  \"polyester\",\n  \"pompom\",\n  \"poncho\",\n  \"pond\",\n  \"pony\",\n  \"poof\",\n  \"pool\",\n  \"pop\",\n  \"popcorn\",\n  \"poppy\",\n  \"popsicle\",\n  \"population\",\n  \"populist\",\n  \"porch\",\n  \"porcupine\",\n  \"port\",\n  \"porter\",\n  \"portfolio\",\n  \"porthole\",\n  \"position\",\n  \"positive\",\n  \"possession\",\n  \"possibility\",\n  \"possible\",\n  \"post\",\n  \"postage\",\n  \"postbox\",\n  \"poster\",\n  \"pot\",\n  \"potato\",\n  \"potential\",\n  \"potty\",\n  \"pouch\",\n  \"poultry\",\n  \"pound\",\n  \"pounding\",\n  \"poverty\",\n  \"powder\",\n  \"power\",\n  \"practice\",\n  \"precedent\",\n  \"precipitation\",\n  \"preface\",\n  \"preference\",\n  \"prelude\",\n  \"premeditation\",\n  \"premier\",\n  \"preoccupation\",\n  \"preparation\",\n  \"presence\",\n  \"present\",\n  \"presentation\",\n  \"president\",\n  \"press\",\n  \"pressroom\",\n  \"pressure\",\n  \"pressurisation\",\n  \"price\",\n  \"pride\",\n  \"priest\",\n  \"priesthood\",\n  \"primary\",\n  \"primate\",\n  \"prince\",\n  \"princess\",\n  \"principal\",\n  \"principle\",\n  \"print\",\n  \"printer\",\n  \"prior\",\n  \"priority\",\n  \"prison\",\n  \"private\",\n  \"prize\",\n  \"prizefight\",\n  \"probation\",\n  \"problem\",\n  \"procedure\",\n  \"process\",\n  \"processing\",\n  \"produce\",\n  \"producer\",\n  \"product\",\n  \"production\",\n  \"profession\",\n  \"professional\",\n  \"professor\",\n  \"profile\",\n  \"profit\",\n  \"program\",\n  \"progress\",\n  \"project\",\n  \"promise\",\n  \"promotion\",\n  \"prompt\",\n  \"pronunciation\",\n  \"proof\",\n  \"proof-reader\",\n  \"propane\",\n  \"property\",\n  \"proposal\",\n  \"prose\",\n  \"prosecution\",\n  \"protection\",\n  \"protest\",\n  \"protocol\",\n  \"prow\",\n  \"pruner\",\n  \"pseudoscience\",\n  \"psychiatrist\",\n  \"psychoanalyst\",\n  \"psychologist\",\n  \"psychology\",\n  \"ptarmigan\",\n  \"public\",\n  \"publicity\",\n  \"publisher\",\n  \"pudding\",\n  \"puddle\",\n  \"puffin\",\n  \"pull\",\n  \"pulley\",\n  \"puma\",\n  \"pump\",\n  \"pumpkin\",\n  \"pumpkinseed\",\n  \"punch\",\n  \"punctuation\",\n  \"punishment\",\n  \"pupa\",\n  \"pupil\",\n  \"puppy\",\n  \"purchase\",\n  \"puritan\",\n  \"purple\",\n  \"purpose\",\n  \"purse\",\n  \"push\",\n  \"pusher\",\n  \"put\",\n  \"pvc\",\n  \"pyjama\",\n  \"pyramid\",\n  \"quadrant\",\n  \"quail\",\n  \"quality\",\n  \"quantity\",\n  \"quart\",\n  \"quarter\",\n  \"quartz\",\n  \"queen\",\n  \"question\",\n  \"quicksand\",\n  \"quiet\",\n  \"quill\",\n  \"quilt\",\n  \"quince\",\n  \"quit\",\n  \"quiver\",\n  \"quotation\",\n  \"quote\",\n  \"rabbi\",\n  \"rabbit\",\n  \"raccoon\",\n  \"race\",\n  \"racer\",\n  \"racing\",\n  \"racism\",\n  \"racist\",\n  \"rack\",\n  \"radar\",\n  \"radiator\",\n  \"radio\",\n  \"radiosonde\",\n  \"radish\",\n  \"raffle\",\n  \"raft\",\n  \"rag\",\n  \"rage\",\n  \"rail\",\n  \"railway\",\n  \"raiment\",\n  \"rain\",\n  \"rainbow\",\n  \"raincoat\",\n  \"rainmaker\",\n  \"rainstorm\",\n  \"raise\",\n  \"rake\",\n  \"ram\",\n  \"rambler\",\n  \"ramie\",\n  \"ranch\",\n  \"random\",\n  \"randomisation\",\n  \"range\",\n  \"rank\",\n  \"raspberry\",\n  \"rat\",\n  \"rate\",\n  \"ratio\",\n  \"raven\",\n  \"ravioli\",\n  \"raw\",\n  \"rawhide\",\n  \"ray\",\n  \"rayon\",\n  \"reach\",\n  \"reactant\",\n  \"reaction\",\n  \"read\",\n  \"reading\",\n  \"reality\",\n  \"reamer\",\n  \"rear\",\n  \"reason\",\n  \"receipt\",\n  \"reception\",\n  \"recess\",\n  \"recipe\",\n  \"recliner\",\n  \"recognition\",\n  \"recommendation\",\n  \"record\",\n  \"recorder\",\n  \"recording\",\n  \"recover\",\n  \"recreation\",\n  \"recruit\",\n  \"rectangle\",\n  \"red\",\n  \"redesign\",\n  \"rediscovery\",\n  \"reduction\",\n  \"reef\",\n  \"refectory\",\n  \"reference\",\n  \"reflection\",\n  \"refrigerator\",\n  \"refund\",\n  \"refuse\",\n  \"region\",\n  \"register\",\n  \"regret\",\n  \"regular\",\n  \"regulation\",\n  \"reindeer\",\n  \"reinscription\",\n  \"reject\",\n  \"relation\",\n  \"relationship\",\n  \"relative\",\n  \"relaxation\",\n  \"release\",\n  \"reliability\",\n  \"relief\",\n  \"religion\",\n  \"relish\",\n  \"reminder\",\n  \"remote\",\n  \"remove\",\n  \"rent\",\n  \"repair\",\n  \"reparation\",\n  \"repeat\",\n  \"replace\",\n  \"replacement\",\n  \"replication\",\n  \"reply\",\n  \"report\",\n  \"representative\",\n  \"reprocessing\",\n  \"republic\",\n  \"reputation\",\n  \"request\",\n  \"requirement\",\n  \"resale\",\n  \"research\",\n  \"reserve\",\n  \"resident\",\n  \"resist\",\n  \"resolution\",\n  \"resolve\",\n  \"resort\",\n  \"resource\",\n  \"respect\",\n  \"respite\",\n  \"respond\",\n  \"response\",\n  \"responsibility\",\n  \"rest\",\n  \"restaurant\",\n  \"result\",\n  \"retailer\",\n  \"rethinking\",\n  \"retina\",\n  \"retouch\",\n  \"return\",\n  \"reveal\",\n  \"revenant\",\n  \"revenge\",\n  \"revenue\",\n  \"review\",\n  \"revolution\",\n  \"revolve\",\n  \"revolver\",\n  \"reward\",\n  \"rheumatism\",\n  \"rhinoceros\",\n  \"rhyme\",\n  \"rhythm\",\n  \"rice\",\n  \"rich\",\n  \"riddle\",\n  \"ride\",\n  \"rider\",\n  \"ridge\",\n  \"rifle\",\n  \"right\",\n  \"rim\",\n  \"ring\",\n  \"ringworm\",\n  \"rip\",\n  \"ripple\",\n  \"rise\",\n  \"riser\",\n  \"risk\",\n  \"river\",\n  \"riverbed\",\n  \"rivulet\",\n  \"road\",\n  \"roadway\",\n  \"roast\",\n  \"robe\",\n  \"robin\",\n  \"rock\",\n  \"rocker\",\n  \"rocket\",\n  \"rocket-ship\",\n  \"rod\",\n  \"role\",\n  \"roll\",\n  \"roller\",\n  \"roof\",\n  \"room\",\n  \"rooster\",\n  \"root\",\n  \"rope\",\n  \"rose\",\n  \"rostrum\",\n  \"rotate\",\n  \"rough\",\n  \"round\",\n  \"roundabout\",\n  \"route\",\n  \"router\",\n  \"routine\",\n  \"row\",\n  \"rowboat\",\n  \"royal\",\n  \"rub\",\n  \"rubber\",\n  \"rubbish\",\n  \"rubric\",\n  \"ruckus\",\n  \"ruffle\",\n  \"rugby\",\n  \"ruin\",\n  \"rule\",\n  \"rum\",\n  \"run\",\n  \"runaway\",\n  \"runner\",\n  \"rush\",\n  \"rutabaga\",\n  \"ruth\",\n  \"ry\",\n  \"sabre\",\n  \"sack\",\n  \"sad\",\n  \"saddle\",\n  \"safe\",\n  \"safety\",\n  \"sage\",\n  \"sail\",\n  \"sailboat\",\n  \"sailor\",\n  \"salad\",\n  \"salary\",\n  \"sale\",\n  \"salesman\",\n  \"salmon\",\n  \"salon\",\n  \"saloon\",\n  \"salt\",\n  \"samovar\",\n  \"sampan\",\n  \"sample\",\n  \"samurai\",\n  \"sand\",\n  \"sandals\",\n  \"sandbar\",\n  \"sandwich\",\n  \"sardine\",\n  \"sari\",\n  \"sarong\",\n  \"sash\",\n  \"satellite\",\n  \"satin\",\n  \"satire\",\n  \"satisfaction\",\n  \"sauce\",\n  \"sausage\",\n  \"save\",\n  \"saving\",\n  \"savings\",\n  \"savior\",\n  \"saviour\",\n  \"saw\",\n  \"saxophone\",\n  \"scale\",\n  \"scallion\",\n  \"scanner\",\n  \"scarecrow\",\n  \"scarf\",\n  \"scarification\",\n  \"scene\",\n  \"scenery\",\n  \"scent\",\n  \"schedule\",\n  \"scheme\",\n  \"schizophrenic\",\n  \"schnitzel\",\n  \"school\",\n  \"schoolhouse\",\n  \"schooner\",\n  \"science\",\n  \"scimitar\",\n  \"scissors\",\n  \"scooter\",\n  \"score\",\n  \"scorn\",\n  \"scow\",\n  \"scraper\",\n  \"scratch\",\n  \"screamer\",\n  \"screen\",\n  \"screenwriting\",\n  \"screw\",\n  \"screwdriver\",\n  \"screw-up\",\n  \"scrim\",\n  \"scrip\",\n  \"script\",\n  \"sculpting\",\n  \"sculpture\",\n  \"sea\",\n  \"seafood\",\n  \"seagull\",\n  \"seal\",\n  \"seaplane\",\n  \"search\",\n  \"seashore\",\n  \"seaside\",\n  \"season\",\n  \"seat\",\n  \"second\",\n  \"secret\",\n  \"secretariat\",\n  \"secretary\",\n  \"section\",\n  \"sectional\",\n  \"sector\",\n  \"secure\",\n  \"security\",\n  \"seed\",\n  \"seeder\",\n  \"segment\",\n  \"select\",\n  \"selection\",\n  \"self\",\n  \"sell\",\n  \"semicircle\",\n  \"semicolon\",\n  \"senator\",\n  \"senior\",\n  \"sense\",\n  \"sensitive\",\n  \"sentence\",\n  \"sepal\",\n  \"septicaemia\",\n  \"series\",\n  \"servant\",\n  \"serve\",\n  \"server\",\n  \"service\",\n  \"session\",\n  \"set\",\n  \"setting\",\n  \"settler\",\n  \"sewer\",\n  \"sex\",\n  \"shack\",\n  \"shade\",\n  \"shadow\",\n  \"shadowbox\",\n  \"shake\",\n  \"shakedown\",\n  \"shaker\",\n  \"shallot\",\n  \"shame\",\n  \"shampoo\",\n  \"shanty\",\n  \"shape\",\n  \"share\",\n  \"shark\",\n  \"sharon\",\n  \"shawl\",\n  \"she\",\n  \"shearling\",\n  \"shears\",\n  \"sheath\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shelter\",\n  \"sherry\",\n  \"shield\",\n  \"shift\",\n  \"shin\",\n  \"shine\",\n  \"shingle\",\n  \"ship\",\n  \"shirt\",\n  \"shirtdress\",\n  \"shoat\",\n  \"shock\",\n  \"shoe\",\n  \"shoehorn\",\n  \"shoe-horn\",\n  \"shoelace\",\n  \"shoemaker\",\n  \"shoes\",\n  \"shoestring\",\n  \"shofar\",\n  \"shoot\",\n  \"shootdown\",\n  \"shop\",\n  \"shopper\",\n  \"shopping\",\n  \"shore\",\n  \"shortage\",\n  \"shorts\",\n  \"shortwave\",\n  \"shot\",\n  \"shoulder\",\n  \"shovel\",\n  \"show\",\n  \"shower\",\n  \"show-stopper\",\n  \"shred\",\n  \"shrimp\",\n  \"shrine\",\n  \"sibling\",\n  \"sick\",\n  \"side\",\n  \"sideboard\",\n  \"sideburns\",\n  \"sidecar\",\n  \"sidestream\",\n  \"sidewalk\",\n  \"siding\",\n  \"sign\",\n  \"signal\",\n  \"signature\",\n  \"signet\",\n  \"significance\",\n  \"signup\",\n  \"silence\",\n  \"silica\",\n  \"silk\",\n  \"silkworm\",\n  \"sill\",\n  \"silly\",\n  \"silo\",\n  \"silver\",\n  \"simple\",\n  \"sing\",\n  \"singer\",\n  \"single\",\n  \"sink\",\n  \"sir\",\n  \"sister\",\n  \"sister-in-law\",\n  \"sitar\",\n  \"site\",\n  \"situation\",\n  \"size\",\n  \"skate\",\n  \"skiing\",\n  \"skill\",\n  \"skin\",\n  \"skirt\",\n  \"skull\",\n  \"skullcap\",\n  \"skullduggery\",\n  \"skunk\",\n  \"sky\",\n  \"skylight\",\n  \"skyscraper\",\n  \"skywalk\",\n  \"slapstick\",\n  \"slash\",\n  \"slave\",\n  \"sled\",\n  \"sledge\",\n  \"sleep\",\n  \"sleet\",\n  \"sleuth\",\n  \"slice\",\n  \"slide\",\n  \"slider\",\n  \"slime\",\n  \"slip\",\n  \"slipper\",\n  \"slippers\",\n  \"slope\",\n  \"sloth\",\n  \"smash\",\n  \"smell\",\n  \"smelting\",\n  \"smile\",\n  \"smock\",\n  \"smog\",\n  \"smoke\",\n  \"smoking\",\n  \"smuggling\",\n  \"snail\",\n  \"snake\",\n  \"snakebite\",\n  \"sneakers\",\n  \"sneeze\",\n  \"snob\",\n  \"snorer\",\n  \"snow\",\n  \"snowboarding\",\n  \"snowflake\",\n  \"snowman\",\n  \"snowmobiling\",\n  \"snowplow\",\n  \"snowstorm\",\n  \"snowsuit\",\n  \"snuggle\",\n  \"soap\",\n  \"soccer\",\n  \"society\",\n  \"sociology\",\n  \"sock\",\n  \"socks\",\n  \"soda\",\n  \"sofa\",\n  \"soft\",\n  \"softball\",\n  \"softdrink\",\n  \"softening\",\n  \"software\",\n  \"soil\",\n  \"soldier\",\n  \"solid\",\n  \"solitaire\",\n  \"solution\",\n  \"sombrero\",\n  \"somersault\",\n  \"somewhere\",\n  \"son\",\n  \"song\",\n  \"songbird\",\n  \"sonnet\",\n  \"soot\",\n  \"soprano\",\n  \"sorbet\",\n  \"sorrow\",\n  \"sort\",\n  \"soulmate\",\n  \"sound\",\n  \"soup\",\n  \"source\",\n  \"sourwood\",\n  \"sousaphone\",\n  \"south\",\n  \"south america\",\n  \"south korea\",\n  \"sow\",\n  \"soy\",\n  \"soybean\",\n  \"space\",\n  \"spacing\",\n  \"spade\",\n  \"spaghetti\",\n  \"spandex\",\n  \"spank\",\n  \"spare\",\n  \"spark\",\n  \"sparrow\",\n  \"spasm\",\n  \"speaker\",\n  \"speakerphone\",\n  \"spear\",\n  \"special\",\n  \"specialist\",\n  \"specific\",\n  \"spectacle\",\n  \"spectacles\",\n  \"spectrograph\",\n  \"speech\",\n  \"speed\",\n  \"speedboat\",\n  \"spell\",\n  \"spelling\",\n  \"spend\",\n  \"sphere\",\n  \"sphynx\",\n  \"spider\",\n  \"spike\",\n  \"spinach\",\n  \"spine\",\n  \"spiral\",\n  \"spirit\",\n  \"spiritual\",\n  \"spite\",\n  \"spleen\",\n  \"split\",\n  \"sponge\",\n  \"spoon\",\n  \"sport\",\n  \"spot\",\n  \"spotlight\",\n  \"spray\",\n  \"spread\",\n  \"spring\",\n  \"sprinter\",\n  \"sprout\",\n  \"spruce\",\n  \"spume\",\n  \"spur\",\n  \"spy\",\n  \"square\",\n  \"squash\",\n  \"squatter\",\n  \"squeegee\",\n  \"squid\",\n  \"squirrel\",\n  \"stable\",\n  \"stack\",\n  \"stacking\",\n  \"stadium\",\n  \"staff\",\n  \"stag\",\n  \"stage\",\n  \"stain\",\n  \"stair\",\n  \"staircase\",\n  \"stallion\",\n  \"stamen\",\n  \"stamina\",\n  \"stamp\",\n  \"stance\",\n  \"stand\",\n  \"standard\",\n  \"standoff\",\n  \"star\",\n  \"start\",\n  \"starter\",\n  \"state\",\n  \"statement\",\n  \"station\",\n  \"station-wagon\",\n  \"statistic\",\n  \"status\",\n  \"stay\",\n  \"steak\",\n  \"steal\",\n  \"steam\",\n  \"steamroller\",\n  \"steel\",\n  \"steeple\",\n  \"stem\",\n  \"stencil\",\n  \"step\",\n  \"step-aunt\",\n  \"step-brother\",\n  \"stepdaughter\",\n  \"step-daughter\",\n  \"step-father\",\n  \"step-grandfather\",\n  \"step-grandmother\",\n  \"stepmother\",\n  \"step-mother\",\n  \"stepping-stone\",\n  \"steps\",\n  \"step-sister\",\n  \"stepson\",\n  \"step-son\",\n  \"step-uncle\",\n  \"stew\",\n  \"stick\",\n  \"stiletto\",\n  \"still\",\n  \"stinger\",\n  \"stitch\",\n  \"stock\",\n  \"stocking\",\n  \"stockings\",\n  \"stock-in-trade\",\n  \"stole\",\n  \"stomach\",\n  \"stone\",\n  \"stonework\",\n  \"stool\",\n  \"stop\",\n  \"stopsign\",\n  \"stopwatch\",\n  \"storage\",\n  \"store\",\n  \"storey\",\n  \"storm\",\n  \"story\",\n  \"storyboard\",\n  \"story-telling\",\n  \"stove\",\n  \"strain\",\n  \"strait\",\n  \"stranger\",\n  \"strap\",\n  \"strategy\",\n  \"straw\",\n  \"strawberry\",\n  \"stream\",\n  \"street\",\n  \"streetcar\",\n  \"strength\",\n  \"stress\",\n  \"stretch\",\n  \"strike\",\n  \"string\",\n  \"strip\",\n  \"stroke\",\n  \"structure\",\n  \"struggle\",\n  \"stud\",\n  \"student\",\n  \"studio\",\n  \"study\",\n  \"stuff\",\n  \"stumbling\",\n  \"stupid\",\n  \"stupidity\",\n  \"sturgeon\",\n  \"style\",\n  \"styling\",\n  \"stylus\",\n  \"subcomponent\",\n  \"subconscious\",\n  \"subject\",\n  \"submarine\",\n  \"subroutine\",\n  \"subsidence\",\n  \"substance\",\n  \"suburb\",\n  \"subway\",\n  \"success\",\n  \"suck\",\n  \"suede\",\n  \"suffocation\",\n  \"sugar\",\n  \"suggestion\",\n  \"suit\",\n  \"suitcase\",\n  \"sultan\",\n  \"summer\",\n  \"sun\",\n  \"sunbeam\",\n  \"sunbonnet\",\n  \"sunday\",\n  \"sundial\",\n  \"sunflower\",\n  \"sunglasses\",\n  \"sunlamp\",\n  \"sunroom\",\n  \"sunshine\",\n  \"supermarket\",\n  \"supply\",\n  \"support\",\n  \"supporter\",\n  \"suppression\",\n  \"surface\",\n  \"surfboard\",\n  \"surgeon\",\n  \"surgery\",\n  \"surname\",\n  \"surprise\",\n  \"surround\",\n  \"survey\",\n  \"sushi\",\n  \"suspect\",\n  \"suspenders\",\n  \"sustainment\",\n  \"SUV\",\n  \"swallow\",\n  \"swamp\",\n  \"swan\",\n  \"swath\",\n  \"sweat\",\n  \"sweater\",\n  \"sweats\",\n  \"sweatshirt\",\n  \"sweatshop\",\n  \"sweatsuit\",\n  \"swedish\",\n  \"sweet\",\n  \"sweets\",\n  \"swell\",\n  \"swim\",\n  \"swimming\",\n  \"swimsuit\",\n  \"swing\",\n  \"swiss\",\n  \"switch\",\n  \"switchboard\",\n  \"swivel\",\n  \"sword\",\n  \"swordfish\",\n  \"sycamore\",\n  \"symmetry\",\n  \"sympathy\",\n  \"syndicate\",\n  \"synergy\",\n  \"synod\",\n  \"syrup\",\n  \"system\",\n  \"tabby\",\n  \"tabernacle\",\n  \"table\",\n  \"tablecloth\",\n  \"tabletop\",\n  \"tachometer\",\n  \"tackle\",\n  \"tadpole\",\n  \"tail\",\n  \"tailor\",\n  \"tailspin\",\n  \"tale\",\n  \"talk\",\n  \"tam\",\n  \"tambour\",\n  \"tambourine\",\n  \"tam-o'-shanter\",\n  \"tandem\",\n  \"tangerine\",\n  \"tank\",\n  \"tanker\",\n  \"tankful\",\n  \"tank-top\",\n  \"tap\",\n  \"tard\",\n  \"target\",\n  \"task\",\n  \"tassel\",\n  \"taste\",\n  \"tatami\",\n  \"tattler\",\n  \"tattoo\",\n  \"tavern\",\n  \"tax\",\n  \"taxi\",\n  \"taxicab\",\n  \"tea\",\n  \"teach\",\n  \"teacher\",\n  \"teaching\",\n  \"team\",\n  \"tear\",\n  \"technologist\",\n  \"technology\",\n  \"teen\",\n  \"teeth\",\n  \"telephone\",\n  \"telescreen\",\n  \"teletype\",\n  \"television\",\n  \"tell\",\n  \"teller\",\n  \"temp\",\n  \"temper\",\n  \"temperature\",\n  \"temple\",\n  \"tempo\",\n  \"temporariness\",\n  \"temporary\",\n  \"temptress\",\n  \"tendency\",\n  \"tenement\",\n  \"tennis\",\n  \"tenor\",\n  \"tension\",\n  \"tent\",\n  \"tepee\",\n  \"term\",\n  \"terracotta\",\n  \"terrapin\",\n  \"territory\",\n  \"test\",\n  \"text\",\n  \"textbook\",\n  \"texture\",\n  \"thanks\",\n  \"thaw\",\n  \"theater\",\n  \"theism\",\n  \"theme\",\n  \"theory\",\n  \"therapist\",\n  \"thermals\",\n  \"thermometer\",\n  \"thigh\",\n  \"thing\",\n  \"thinking\",\n  \"thirst\",\n  \"thistle\",\n  \"thomas\",\n  \"thong\",\n  \"thongs\",\n  \"thorn\",\n  \"thought\",\n  \"thread\",\n  \"thrill\",\n  \"throat\",\n  \"throne\",\n  \"thrush\",\n  \"thumb\",\n  \"thunder\",\n  \"thunderbolt\",\n  \"thunderhead\",\n  \"thunderstorm\",\n  \"tiara\",\n  \"tic\",\n  \"ticket\",\n  \"tie\",\n  \"tiger\",\n  \"tight\",\n  \"tights\",\n  \"tile\",\n  \"till\",\n  \"timbale\",\n  \"timber\",\n  \"time\",\n  \"timeline\",\n  \"timeout\",\n  \"timer\",\n  \"timpani\",\n  \"tin\",\n  \"tinderbox\",\n  \"tinkle\",\n  \"tintype\",\n  \"tip\",\n  \"tire\",\n  \"tissue\",\n  \"titanium\",\n  \"title\",\n  \"toad\",\n  \"toast\",\n  \"today\",\n  \"toe\",\n  \"toenail\",\n  \"toga\",\n  \"togs\",\n  \"toilet\",\n  \"tolerance\",\n  \"tom\",\n  \"tomato\",\n  \"tomography\",\n  \"tomorrow\",\n  \"tom-tom\",\n  \"ton\",\n  \"tone\",\n  \"tongue\",\n  \"tonight\",\n  \"tool\",\n  \"toot\",\n  \"tooth\",\n  \"toothbrush\",\n  \"toothpaste\",\n  \"toothpick\",\n  \"top\",\n  \"top-hat\",\n  \"topic\",\n  \"topsail\",\n  \"toque\",\n  \"torchiere\",\n  \"toreador\",\n  \"tornado\",\n  \"torso\",\n  \"tortellini\",\n  \"tortoise\",\n  \"tosser\",\n  \"total\",\n  \"tote\",\n  \"touch\",\n  \"tough\",\n  \"tough-guy\",\n  \"tour\",\n  \"tourist\",\n  \"towel\",\n  \"tower\",\n  \"town\",\n  \"townhouse\",\n  \"tow-truck\",\n  \"toy\",\n  \"trachoma\",\n  \"track\",\n  \"tracksuit\",\n  \"tractor\",\n  \"trade\",\n  \"tradition\",\n  \"traditionalism\",\n  \"traffic\",\n  \"trail\",\n  \"trailer\",\n  \"train\",\n  \"trainer\",\n  \"training\",\n  \"tram\",\n  \"tramp\",\n  \"transaction\",\n  \"transition\",\n  \"translation\",\n  \"transmission\",\n  \"transom\",\n  \"transport\",\n  \"transportation\",\n  \"trapdoor\",\n  \"trapezium\",\n  \"trapezoid\",\n  \"trash\",\n  \"travel\",\n  \"tray\",\n  \"treat\",\n  \"treatment\",\n  \"tree\",\n  \"trellis\",\n  \"tremor\",\n  \"trench\",\n  \"trial\",\n  \"triangle\",\n  \"tribe\",\n  \"trick\",\n  \"trigonometry\",\n  \"trim\",\n  \"trinket\",\n  \"trip\",\n  \"tripod\",\n  \"trolley\",\n  \"trombone\",\n  \"trooper\",\n  \"trouble\",\n  \"trousers\",\n  \"trout\",\n  \"trove\",\n  \"trowel\",\n  \"truck\",\n  \"truckit\",\n  \"trumpet\",\n  \"trunk\",\n  \"trust\",\n  \"truth\",\n  \"try\",\n  \"t-shirt\",\n  \"tsunami\",\n  \"tub\",\n  \"tuba\",\n  \"tube\",\n  \"tugboat\",\n  \"tulip\",\n  \"tummy\",\n  \"tuna\",\n  \"tune\",\n  \"tune-up\",\n  \"tunic\",\n  \"tunnel\",\n  \"turban\",\n  \"turkish\",\n  \"turn\",\n  \"turnip\",\n  \"turnover\",\n  \"turnstile\",\n  \"turret\",\n  \"turtle\",\n  \"tussle\",\n  \"tutu\",\n  \"tuxedo\",\n  \"tv\",\n  \"twig\",\n  \"twilight\",\n  \"twine\",\n  \"twist\",\n  \"twister\",\n  \"two\",\n  \"type\",\n  \"typewriter\",\n  \"typhoon\",\n  \"tyvek\",\n  \"ukulele\",\n  \"umbrella\",\n  \"unblinking\",\n  \"uncle\",\n  \"underclothes\",\n  \"underground\",\n  \"underneath\",\n  \"underpants\",\n  \"underpass\",\n  \"undershirt\",\n  \"understanding\",\n  \"underwear\",\n  \"underwire\",\n  \"unemployment\",\n  \"unibody\",\n  \"uniform\",\n  \"union\",\n  \"unique\",\n  \"unit\",\n  \"unity\",\n  \"university\",\n  \"upper\",\n  \"upstairs\",\n  \"urn\",\n  \"usage\",\n  \"use\",\n  \"user\",\n  \"usher\",\n  \"usual\",\n  \"utensil\",\n  \"vacation\",\n  \"vacuum\",\n  \"vagrant\",\n  \"valance\",\n  \"validity\",\n  \"valley\",\n  \"valuable\",\n  \"value\",\n  \"van\",\n  \"vane\",\n  \"vanity\",\n  \"variation\",\n  \"variety\",\n  \"vase\",\n  \"vast\",\n  \"vault\",\n  \"vaulting\",\n  \"veal\",\n  \"vegetable\",\n  \"vegetarianism\",\n  \"vegetation\",\n  \"vehicle\",\n  \"veil\",\n  \"vein\",\n  \"veldt\",\n  \"vellum\",\n  \"velodrome\",\n  \"velvet\",\n  \"vengeance\",\n  \"venom\",\n  \"veranda\",\n  \"verdict\",\n  \"vermicelli\",\n  \"verse\",\n  \"version\",\n  \"vertigo\",\n  \"verve\",\n  \"vessel\",\n  \"vest\",\n  \"vestment\",\n  \"vibe\",\n  \"vibraphone\",\n  \"vibration\",\n  \"video\",\n  \"view\",\n  \"villa\",\n  \"village\",\n  \"vineyard\",\n  \"vinyl\",\n  \"viola\",\n  \"violence\",\n  \"violet\",\n  \"violin\",\n  \"virginal\",\n  \"virtue\",\n  \"virus\",\n  \"viscose\",\n  \"vise\",\n  \"vision\",\n  \"visit\",\n  \"visitor\",\n  \"visor\",\n  \"visual\",\n  \"vitality\",\n  \"vixen\",\n  \"voice\",\n  \"volcano\",\n  \"volleyball\",\n  \"volume\",\n  \"voyage\",\n  \"vulture\",\n  \"wad\",\n  \"wafer\",\n  \"waffle\",\n  \"waist\",\n  \"waistband\",\n  \"wait\",\n  \"waiter\",\n  \"waitress\",\n  \"wake\",\n  \"walk\",\n  \"walker\",\n  \"walkway\",\n  \"wall\",\n  \"wallaby\",\n  \"wallet\",\n  \"walnut\",\n  \"walrus\",\n  \"wampum\",\n  \"wannabe\",\n  \"war\",\n  \"warden\",\n  \"warlock\",\n  \"warmth\",\n  \"warm-up\",\n  \"warning\",\n  \"wash\",\n  \"washbasin\",\n  \"washcloth\",\n  \"washer\",\n  \"washtub\",\n  \"wasp\",\n  \"waste\",\n  \"wastebasket\",\n  \"watch\",\n  \"watchmaker\",\n  \"water\",\n  \"waterbed\",\n  \"waterfall\",\n  \"waterskiing\",\n  \"waterspout\",\n  \"wave\",\n  \"wax\",\n  \"way\",\n  \"weakness\",\n  \"wealth\",\n  \"weapon\",\n  \"wear\",\n  \"weasel\",\n  \"weather\",\n  \"web\",\n  \"wedding\",\n  \"wedge\",\n  \"weed\",\n  \"weeder\",\n  \"weedkiller\",\n  \"week\",\n  \"weekend\",\n  \"weekender\",\n  \"weight\",\n  \"weird\",\n  \"welcome\",\n  \"welfare\",\n  \"well\",\n  \"west\",\n  \"western\",\n  \"wet-bar\",\n  \"wetsuit\",\n  \"whale\",\n  \"wharf\",\n  \"wheat\",\n  \"wheel\",\n  \"whereas\",\n  \"while\",\n  \"whip\",\n  \"whirlpool\",\n  \"whirlwind\",\n  \"whisker\",\n  \"whiskey\",\n  \"whistle\",\n  \"white\",\n  \"whole\",\n  \"wholesale\",\n  \"wholesaler\",\n  \"whorl\",\n  \"width\",\n  \"wife\",\n  \"wilderness\",\n  \"wildlife\",\n  \"will\",\n  \"willow\",\n  \"win\",\n  \"wind\",\n  \"windage\",\n  \"wind-chime\",\n  \"window\",\n  \"windscreen\",\n  \"windshield\",\n  \"wine\",\n  \"wing\",\n  \"wingman\",\n  \"wingtip\",\n  \"winner\",\n  \"winter\",\n  \"wire\",\n  \"wisdom\",\n  \"wiseguy\",\n  \"wish\",\n  \"wisteria\",\n  \"witch\",\n  \"witch-hunt\",\n  \"withdrawal\",\n  \"witness\",\n  \"wolf\",\n  \"wombat\",\n  \"women\",\n  \"wonder\",\n  \"wood\",\n  \"woodland\",\n  \"woodshed\",\n  \"woodwind\",\n  \"wool\",\n  \"woolen\",\n  \"word\",\n  \"work\",\n  \"workbench\",\n  \"worker\",\n  \"workhorse\",\n  \"working\",\n  \"worklife\",\n  \"workshop\",\n  \"world\",\n  \"worm\",\n  \"worry\",\n  \"worth\",\n  \"worthy\",\n  \"wound\",\n  \"wrap\",\n  \"wraparound\",\n  \"wrecker\",\n  \"wren\",\n  \"wrench\",\n  \"wrestler\",\n  \"wrinkle\",\n  \"wrist\",\n  \"writer\",\n  \"writing\",\n  \"wrong\",\n  \"xylophone\",\n  \"yacht\",\n  \"yak\",\n  \"yam\",\n  \"yard\",\n  \"yarmulke\",\n  \"yarn\",\n  \"yawl\",\n  \"year\",\n  \"yeast\",\n  \"yellow\",\n  \"yesterday\",\n  \"yew\",\n  \"yin\",\n  \"yoga\",\n  \"yogurt\",\n  \"yoke\",\n  \"you\",\n  \"young\",\n  \"youth\",\n  \"yurt\",\n  \"zampone\",\n  \"zebra\",\n  \"zebrafish\",\n  \"zephyr\",\n  \"ziggurat\",\n  \"zinc\",\n  \"zipper\",\n  \"zither\",\n  \"zone\",\n  \"zoo\",\n  \"zoologist\",\n  \"zoology\",\n  \"zoot-suit\",\n  \"zucchini\",\n];\nconst length = nouns.length;\nconst one = _ => nouns[Math.floor(Math.random() * length)];\n\nmodule.exports = { nouns, one };\n","import pluralize from 'pluralize';\nimport { nouns } from 'nouns';\n\n\n/**\n * Patched clone of https://github.com/jozsefsallai/dogeify\n * to make it work in browser\n */\nexport class Dogeify {\n    constructor() {\n        this.ADJECTIVES = 'so such very much many how'.split(' ');\n        this.EMOTIONS = 'wow amaze excite'.split(' ');\n        this.forbiddenPhrases = [\n            're', 've', '/'\n        ];\n        this.allNouns = [];\n    };\n\n    /**\n     * getSentences()\n     * Turns the provided string into an array of sentences\n     * @param {String} str\n     * @returns {Array}\n     */\n    getSentences(str) {\n        const acceptedPunctuations = ['.', '!', '?'];\n        if (!acceptedPunctuations.includes(str[str.length - 1])) {\n            str += '.';\n        }\n\n        str = str\n            .toLowerCase()\n            .match(/[^.!?]+[.!?]+/g);\n        if (str && str.length) {\n            str = str.map(sentence => {\n                if (sentence && sentence[0] === ' ') {\n                    return sentence.slice(1);\n                }\n                return sentence;\n            });\n        }\n        return str;\n    };\n\n    /**\n     * isWordForbidden()\n     * Checks if a word should be forbidden or ignored\n     * @param {String} word\n     * @returns {Boolean}\n     */\n    isWordForbidden(word) {\n        return this.forbiddenPhrases.includes(word) || !!(this.ignore && this.ignore.includes(word));\n    }\n\n    /**\n     * getNouns()\n     * Returns an array of the nouns in a sentence\n     * @param {String} sentence\n     * @returns {Array}\n     */\n    getNouns(sentence) {\n        return sentence\n            .split(/\\/| /g)\n            .map(word => word.replace(/[^a-zA-Z0-9\\-']+/g, ''))\n            .filter(word => this.allNouns.includes(word) && !this.isWordForbidden(word));\n    };\n\n    /**\n     * correctSpelling()\n     * Replaces some common word parts into dogespeak\n     * @param {String} word\n     * @returns {String}\n     */\n    correctSpelling(word) {\n        return word\n            .replace(/er$/, 'ar')\n            .replace('ph', 'f')\n            .replace('cious', 'shus')\n            .replace('stion', 'schun')\n            .replace('tion', 'shun')\n            .replace('doge', 'dog')\n            .replace('dog', 'doge');\n    };\n\n    /**\n     * getAdjective()\n     * Returns a random adjective from the ADJECTIVES array\n     * @returns {String}\n     */\n    getAdjective() {\n        const idx = Math.floor(Math.random() * this.ADJECTIVES.length);\n        return this.ADJECTIVES[idx];\n    };\n\n    /**\n     * getEmotion()\n     * Returns a random emotion from the EMOTIONS array\n     * @returns {String}\n     */\n    getEmotion() {\n        const idx = Math.floor(Math.random() * this.EMOTIONS.length);\n        return this.EMOTIONS[idx];\n    };\n\n    /**\n     * fixPhrases()\n     * Converts the spelling of an array of words and turns them\n     * into phrases\n     * @param {Array} phrases\n     * @returns {Array}\n     */\n    fixPhrases(phrases) {\n        return phrases.map((phrase) => {\n            let newPhrase = this.correctSpelling(phrase);\n            newPhrase = `${this.getAdjective()} ${newPhrase}.`;\n            return newPhrase;\n        });\n    };\n\n    /**\n     * fillNouns()\n     * Fills the allNouns array with all nouns\n     */\n    fillNouns() {\n        this.allNouns = [\n            ...nouns,\n            ...nouns.map(n => pluralize(n))\n        ];\n    }\n\n    /**\n     * init()\n     * Initializes the dogeifying process\n     * @param {String} str\n     * @returns {String}\n     */\n    async init(str, opts = {}) {\n        if (opts) {\n            Object.assign(this, opts);\n        }\n\n        await this.fillNouns();\n\n        let sentences = this.getSentences(str);\n        if (!sentences) {\n            sentences = [];\n        }\n        if (sentences.length) {\n            sentences = sentences.map(sentence => {\n                let nouns = this.getNouns(sentence);\n                if (nouns && nouns.length) {\n                    nouns = this.fixPhrases(nouns);\n                } else {\n                    nouns = [];\n                }\n                nouns.push(`${this.getEmotion()}.`);\n                return nouns.join(' ');\n            });\n        } else {\n            sentences.push(`${this.getEmotion()}.`);\n        }\n\n        return sentences.join(' ');\n    };\n}\n","import 'regenerator-runtime/runtime';\nimport { sentence } from 'txtgen';\nimport { Dogeify } from './dogeify';\n\nconst DOGE_WIDTH = 500;\nconst DOGE_HEIGHT = 500;\nconst rand = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nfunction debounce(f, ms) {\n    let isCooldown = false;\n    return function() {\n        if (isCooldown) return;\n        f.apply(this, arguments);\n        isCooldown = true;\n        setTimeout(() => isCooldown = false, ms);\n    };\n}\n\nconst placePhrases = () => {\n    const {width, height} = document.body.getClientRects()[0];\n    const amount = width > 900 ? 4 : 2;\n    Promise.all(Array.from({length: amount}).map(() => new Dogeify().init(sentence())))\n        .then((sentencies) => {\n            const container = document.createDocumentFragment()\n            sentencies.flatMap((text) => text.split('. '))\n                .forEach((phrase) => {\n                    const phraseNode = document.createElement('span');\n                    phraseNode.className = 'phrase';\n                    phraseNode.style.left = `${rand(0, width - 50)}px`\n                    phraseNode.style.top = `${rand(0, height - 50)}px`;\n                    phraseNode.innerText = phrase;\n                    container.appendChild(phraseNode);\n                });\n            document.body.append(container);\n        });\n};\n\nconst positionDoge = () => {\n    const {width, height} = document.body.getClientRects()[0];\n    const dogeEl = document.querySelector('#doge-container');\n    dogeEl.style.left = `${rand(0, width - DOGE_WIDTH)}px`;\n    dogeEl.style.top = `${rand(0, height - DOGE_HEIGHT)}px`;\n};\n\nconst initBg = () => {\n    document.body.style.backgroundImage = `url(\"https://picsum.photos/1980/1024?rand=${Math.random()}\")`;\n};\n\nconst clearPhrases = () => {\n    document.querySelectorAll('.phrase').forEach((element) => {\n        element.remove();\n    });\n};\n\nconst init = () => {\n    initBg();\n    positionDoge();\n    clearPhrases();\n    placePhrases();\n}\n\nwindow.addEventListener('click', init);\nwindow.addEventListener('DOMContentLoaded', init);\nwindow.addEventListener('resize', debounce(init, 1000));\n"]}